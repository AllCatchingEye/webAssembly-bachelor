// Generated by `wit-bindgen` 0.24.0. DO NOT EDIT!
package frontend

// #include "frontend.h"
// #include <stdlib.h>
import "C"
import "unsafe"
import "fmt"
// Import functions from wasi:cli/environment@0.2.0
type WasiCli0_2_0_EnvironmentTuple2StringStringT struct {
  F0 string
  F1 string
}

func WasiCli0_2_0_EnvironmentGetEnvironment() []WasiCli0_2_0_EnvironmentTuple2StringStringT {
  var ret C.frontend_list_tuple2_string_string_t
  C.wasi_cli_environment_get_environment(&ret )
  var lift_ret []WasiCli0_2_0_EnvironmentTuple2StringStringT
  lift_ret = make([]WasiCli0_2_0_EnvironmentTuple2StringStringT, ret.len)
  if ret.len > 0 {
    for lift_ret_i := 0; lift_ret_i < int(ret.len); lift_ret_i++ {
      var empty_lift_ret C.frontend_tuple2_string_string_t
      lift_ret_ptr := *(*C.frontend_tuple2_string_string_t)(unsafe.Pointer(uintptr(unsafe.Pointer(ret.ptr)) +
      uintptr(lift_ret_i)*unsafe.Sizeof(empty_lift_ret)))
      var list_lift_ret WasiCli0_2_0_EnvironmentTuple2StringStringT
      var list_lift_ret_F0 string
      list_lift_ret_F0 = C.GoStringN((*C.char)(unsafe.Pointer(lift_ret_ptr.f0.ptr)), C.int(lift_ret_ptr.f0.len))
      list_lift_ret.F0 = list_lift_ret_F0
      var list_lift_ret_F1 string
      list_lift_ret_F1 = C.GoStringN((*C.char)(unsafe.Pointer(lift_ret_ptr.f1.ptr)), C.int(lift_ret_ptr.f1.len))
      list_lift_ret.F1 = list_lift_ret_F1
      lift_ret[lift_ret_i] = list_lift_ret
    }
  }
  return lift_ret
}

func WasiCli0_2_0_EnvironmentGetArguments() []string {
  var ret C.frontend_list_string_t
  C.wasi_cli_environment_get_arguments(&ret )
  var lift_ret []string
  lift_ret = make([]string, ret.len)
  if ret.len > 0 {
    for lift_ret_i := 0; lift_ret_i < int(ret.len); lift_ret_i++ {
      var empty_lift_ret C.frontend_string_t
      lift_ret_ptr := *(*C.frontend_string_t)(unsafe.Pointer(uintptr(unsafe.Pointer(ret.ptr)) +
      uintptr(lift_ret_i)*unsafe.Sizeof(empty_lift_ret)))
      var list_lift_ret string
      list_lift_ret = C.GoStringN((*C.char)(unsafe.Pointer(lift_ret_ptr.ptr)), C.int(lift_ret_ptr.len))
      lift_ret[lift_ret_i] = list_lift_ret
    }
  }
  return lift_ret
}

func WasiCli0_2_0_EnvironmentInitialCwd() Option[string] {
  var ret C.frontend_option_string_t
  C.wasi_cli_environment_initial_cwd(&ret )
  var lift_ret Option[string]
  if ret.is_some {
    var lift_ret_val string
    lift_ret_val = C.GoStringN((*C.char)(unsafe.Pointer(ret.val.ptr)), C.int(ret.val.len))
    lift_ret.Set(lift_ret_val)
  } else {
    lift_ret.Unset()
  }
  return lift_ret
}

// Import functions from wasi:cli/exit@0.2.0
func WasiCli0_2_0_ExitExit(status Result[struct{}, struct{}]) {
  var lower_status C.wasi_cli_exit_result_void_void_t
  lower_status.is_err = status.IsErr()
  if status.IsOk() {
  } else {
  }
  C.wasi_cli_exit_exit(&lower_status )
}

// Import functions from wasi:io/error@0.2.0
// WasiIo0_2_0_ErrorError is a handle to imported resource error
type WasiIo0_2_0_ErrorError int32

//go:wasmimport wasi:io/error@0.2.0 [resource-drop]error
func _WasiIo0_2_0_ErrorError_drop(self WasiIo0_2_0_ErrorError)

func (self WasiIo0_2_0_ErrorError) Drop() {
  _WasiIo0_2_0_ErrorError_drop(self)
}

func (self WasiIo0_2_0_ErrorError) ToDebugString() string {
  var lower_self C.wasi_io_error_borrow_error_t
  lower_self.__handle = C.int32_t(self)
  var ret C.frontend_string_t
  C.wasi_io_error_method_error_to_debug_string(lower_self , &ret )
  var lift_ret string
  lift_ret = C.GoStringN((*C.char)(unsafe.Pointer(ret.ptr)), C.int(ret.len))
  return lift_ret
}

// Import functions from wasi:io/poll@0.2.0
// WasiIo0_2_0_PollPollable is a handle to imported resource pollable
type WasiIo0_2_0_PollPollable int32

//go:wasmimport wasi:io/poll@0.2.0 [resource-drop]pollable
func _WasiIo0_2_0_PollPollable_drop(self WasiIo0_2_0_PollPollable)

func (self WasiIo0_2_0_PollPollable) Drop() {
  _WasiIo0_2_0_PollPollable_drop(self)
}

func (self WasiIo0_2_0_PollPollable) Ready() bool {
  var lower_self C.wasi_io_poll_borrow_pollable_t
  lower_self.__handle = C.int32_t(self)
  ret := C.wasi_io_poll_method_pollable_ready(lower_self )
  lift_ret := ret
  return lift_ret
}

func (self WasiIo0_2_0_PollPollable) Block() {
  var lower_self C.wasi_io_poll_borrow_pollable_t
  lower_self.__handle = C.int32_t(self)
  C.wasi_io_poll_method_pollable_block(lower_self )
}

func WasiIo0_2_0_PollPoll(in []WasiIo0_2_0_PollPollable) []uint32 {
  var lower_in C.wasi_io_poll_list_borrow_pollable_t
  if len(in) == 0 {
    lower_in.ptr = nil
    lower_in.len = 0
  } else {
    var empty_lower_in C.wasi_io_poll_borrow_pollable_t
    lower_in.ptr = (*C.wasi_io_poll_borrow_pollable_t)(C.malloc(C.size_t(len(in)) * C.size_t(unsafe.Sizeof(empty_lower_in))))
    lower_in.len = C.size_t(len(in))
    for lower_in_i := range in {
      lower_in_ptr := (*C.wasi_io_poll_borrow_pollable_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_in.ptr)) +
      uintptr(lower_in_i)*unsafe.Sizeof(empty_lower_in)))
      var lower_in_ptr_value C.wasi_io_poll_borrow_pollable_t
      lower_in_ptr_value.__handle = C.int32_t(in[lower_in_i])
      *lower_in_ptr = lower_in_ptr_value
    }
  }
  var ret C.frontend_list_u32_t
  C.wasi_io_poll_poll(&lower_in , &ret )
  var lift_ret []uint32
  lift_ret = make([]uint32, ret.len)
  if ret.len > 0 {
    for lift_ret_i := 0; lift_ret_i < int(ret.len); lift_ret_i++ {
      var empty_lift_ret C.uint32_t
      lift_ret_ptr := *(*C.uint32_t)(unsafe.Pointer(uintptr(unsafe.Pointer(ret.ptr)) +
      uintptr(lift_ret_i)*unsafe.Sizeof(empty_lift_ret)))
      var list_lift_ret uint32
      list_lift_ret = uint32(lift_ret_ptr)
      lift_ret[lift_ret_i] = list_lift_ret
    }
  }
  return lift_ret
}

// Import functions from wasi:io/streams@0.2.0
type WasiIo0_2_0_StreamsError = WasiIo0_2_0_ErrorError
type WasiIo0_2_0_StreamsPollable = WasiIo0_2_0_PollPollable
type WasiIo0_2_0_StreamsStreamErrorKind int

const (
WasiIo0_2_0_StreamsStreamErrorKindLastOperationFailed WasiIo0_2_0_StreamsStreamErrorKind = iota
WasiIo0_2_0_StreamsStreamErrorKindClosed
)

type WasiIo0_2_0_StreamsStreamError struct {
  kind WasiIo0_2_0_StreamsStreamErrorKind
  val any
}

func (n WasiIo0_2_0_StreamsStreamError) Kind() WasiIo0_2_0_StreamsStreamErrorKind {
  return n.kind
}

func WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(v WasiIo0_2_0_StreamsError) WasiIo0_2_0_StreamsStreamError{
  return WasiIo0_2_0_StreamsStreamError{kind: WasiIo0_2_0_StreamsStreamErrorKindLastOperationFailed, val: v}
}

func (n WasiIo0_2_0_StreamsStreamError) GetLastOperationFailed() WasiIo0_2_0_StreamsError{
  if g, w := n.Kind(), WasiIo0_2_0_StreamsStreamErrorKindLastOperationFailed; g != w {
    panic(fmt.Sprintf("Attr kind is %v, not %v", g, w))
  }
  return n.val.(WasiIo0_2_0_StreamsError)
}

func (n *WasiIo0_2_0_StreamsStreamError) SetLastOperationFailed(v WasiIo0_2_0_StreamsError) {
  n.val = v
  n.kind = WasiIo0_2_0_StreamsStreamErrorKindLastOperationFailed
}

func WasiIo0_2_0_StreamsStreamErrorClosed() WasiIo0_2_0_StreamsStreamError{
  return WasiIo0_2_0_StreamsStreamError{kind: WasiIo0_2_0_StreamsStreamErrorKindClosed}
}

// WasiIo0_2_0_StreamsInputStream is a handle to imported resource input-stream
type WasiIo0_2_0_StreamsInputStream int32

//go:wasmimport wasi:io/streams@0.2.0 [resource-drop]input-stream
func _WasiIo0_2_0_StreamsInputStream_drop(self WasiIo0_2_0_StreamsInputStream)

func (self WasiIo0_2_0_StreamsInputStream) Drop() {
  _WasiIo0_2_0_StreamsInputStream_drop(self)
}

// WasiIo0_2_0_StreamsOutputStream is a handle to imported resource output-stream
type WasiIo0_2_0_StreamsOutputStream int32

//go:wasmimport wasi:io/streams@0.2.0 [resource-drop]output-stream
func _WasiIo0_2_0_StreamsOutputStream_drop(self WasiIo0_2_0_StreamsOutputStream)

func (self WasiIo0_2_0_StreamsOutputStream) Drop() {
  _WasiIo0_2_0_StreamsOutputStream_drop(self)
}

func (self WasiIo0_2_0_StreamsInputStream) Read(len uint64) Result[[]uint8, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_input_stream_t
  lower_self.__handle = C.int32_t(self)
  lower_len := C.uint64_t(len)
  var ret C.wasi_io_streams_result_list_u8_stream_error_t
  C.wasi_io_streams_method_input_stream_read(lower_self , lower_len , &ret )
  var lift_ret Result[[]uint8, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.frontend_list_u8_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val []uint8
    lift_ret_val = make([]uint8, lift_ret_ptr.len)
    if lift_ret_ptr.len > 0 {
      for lift_ret_val_i := 0; lift_ret_val_i < int(lift_ret_ptr.len); lift_ret_val_i++ {
        var empty_lift_ret_val C.uint8_t
        lift_ret_val_ptr := *(*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lift_ret_ptr.ptr)) +
        uintptr(lift_ret_val_i)*unsafe.Sizeof(empty_lift_ret_val)))
        var list_lift_ret_val uint8
        list_lift_ret_val = uint8(lift_ret_val_ptr)
        lift_ret_val[lift_ret_val_i] = list_lift_ret_val
      }
    }
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiIo0_2_0_StreamsInputStream) BlockingRead(len uint64) Result[[]uint8, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_input_stream_t
  lower_self.__handle = C.int32_t(self)
  lower_len := C.uint64_t(len)
  var ret C.wasi_io_streams_result_list_u8_stream_error_t
  C.wasi_io_streams_method_input_stream_blocking_read(lower_self , lower_len , &ret )
  var lift_ret Result[[]uint8, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.frontend_list_u8_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val []uint8
    lift_ret_val = make([]uint8, lift_ret_ptr.len)
    if lift_ret_ptr.len > 0 {
      for lift_ret_val_i := 0; lift_ret_val_i < int(lift_ret_ptr.len); lift_ret_val_i++ {
        var empty_lift_ret_val C.uint8_t
        lift_ret_val_ptr := *(*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lift_ret_ptr.ptr)) +
        uintptr(lift_ret_val_i)*unsafe.Sizeof(empty_lift_ret_val)))
        var list_lift_ret_val uint8
        list_lift_ret_val = uint8(lift_ret_val_ptr)
        lift_ret_val[lift_ret_val_i] = list_lift_ret_val
      }
    }
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiIo0_2_0_StreamsInputStream) Skip(len uint64) Result[uint64, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_input_stream_t
  lower_self.__handle = C.int32_t(self)
  lower_len := C.uint64_t(len)
  var ret C.wasi_io_streams_result_u64_stream_error_t
  C.wasi_io_streams_method_input_stream_skip(lower_self , lower_len , &ret )
  var lift_ret Result[uint64, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.uint64_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint64
    lift_ret_val = uint64(lift_ret_ptr)
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiIo0_2_0_StreamsInputStream) BlockingSkip(len uint64) Result[uint64, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_input_stream_t
  lower_self.__handle = C.int32_t(self)
  lower_len := C.uint64_t(len)
  var ret C.wasi_io_streams_result_u64_stream_error_t
  C.wasi_io_streams_method_input_stream_blocking_skip(lower_self , lower_len , &ret )
  var lift_ret Result[uint64, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.uint64_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint64
    lift_ret_val = uint64(lift_ret_ptr)
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiIo0_2_0_StreamsInputStream) Subscribe() WasiIo0_2_0_StreamsPollable {
  var lower_self C.wasi_io_streams_borrow_input_stream_t
  lower_self.__handle = C.int32_t(self)
  ret := C.wasi_io_streams_method_input_stream_subscribe(lower_self )
  var lift_ret WasiIo0_2_0_StreamsPollable
  lift_ret = WasiIo0_2_0_StreamsPollable(ret.__handle)

  return lift_ret
}

func (self WasiIo0_2_0_StreamsOutputStream) CheckWrite() Result[uint64, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_output_stream_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_io_streams_result_u64_stream_error_t
  C.wasi_io_streams_method_output_stream_check_write(lower_self , &ret )
  var lift_ret Result[uint64, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.uint64_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint64
    lift_ret_val = uint64(lift_ret_ptr)
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiIo0_2_0_StreamsOutputStream) Write(contents []uint8) Result[struct{}, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_output_stream_t
  lower_self.__handle = C.int32_t(self)
  var lower_contents C.frontend_list_u8_t
  if len(contents) == 0 {
    lower_contents.ptr = nil
    lower_contents.len = 0
  } else {
    var empty_lower_contents C.uint8_t
    lower_contents.ptr = (*C.uint8_t)(C.malloc(C.size_t(len(contents)) * C.size_t(unsafe.Sizeof(empty_lower_contents))))
    lower_contents.len = C.size_t(len(contents))
    for lower_contents_i := range contents {
      lower_contents_ptr := (*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_contents.ptr)) +
      uintptr(lower_contents_i)*unsafe.Sizeof(empty_lower_contents)))
      lower_contents_ptr_value := C.uint8_t(contents[lower_contents_i])
      *lower_contents_ptr = lower_contents_ptr_value
    }
  }
  var ret C.wasi_io_streams_result_void_stream_error_t
  C.wasi_io_streams_method_output_stream_write(lower_self , &lower_contents , &ret )
  var lift_ret Result[struct{}, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiIo0_2_0_StreamsOutputStream) BlockingWriteAndFlush(contents []uint8) Result[struct{}, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_output_stream_t
  lower_self.__handle = C.int32_t(self)
  var lower_contents C.frontend_list_u8_t
  if len(contents) == 0 {
    lower_contents.ptr = nil
    lower_contents.len = 0
  } else {
    var empty_lower_contents C.uint8_t
    lower_contents.ptr = (*C.uint8_t)(C.malloc(C.size_t(len(contents)) * C.size_t(unsafe.Sizeof(empty_lower_contents))))
    lower_contents.len = C.size_t(len(contents))
    for lower_contents_i := range contents {
      lower_contents_ptr := (*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_contents.ptr)) +
      uintptr(lower_contents_i)*unsafe.Sizeof(empty_lower_contents)))
      lower_contents_ptr_value := C.uint8_t(contents[lower_contents_i])
      *lower_contents_ptr = lower_contents_ptr_value
    }
  }
  var ret C.wasi_io_streams_result_void_stream_error_t
  C.wasi_io_streams_method_output_stream_blocking_write_and_flush(lower_self , &lower_contents , &ret )
  var lift_ret Result[struct{}, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiIo0_2_0_StreamsOutputStream) Flush() Result[struct{}, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_output_stream_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_io_streams_result_void_stream_error_t
  C.wasi_io_streams_method_output_stream_flush(lower_self , &ret )
  var lift_ret Result[struct{}, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiIo0_2_0_StreamsOutputStream) BlockingFlush() Result[struct{}, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_output_stream_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_io_streams_result_void_stream_error_t
  C.wasi_io_streams_method_output_stream_blocking_flush(lower_self , &ret )
  var lift_ret Result[struct{}, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiIo0_2_0_StreamsOutputStream) Subscribe() WasiIo0_2_0_StreamsPollable {
  var lower_self C.wasi_io_streams_borrow_output_stream_t
  lower_self.__handle = C.int32_t(self)
  ret := C.wasi_io_streams_method_output_stream_subscribe(lower_self )
  var lift_ret WasiIo0_2_0_StreamsPollable
  lift_ret = WasiIo0_2_0_StreamsPollable(ret.__handle)

  return lift_ret
}

func (self WasiIo0_2_0_StreamsOutputStream) WriteZeroes(len uint64) Result[struct{}, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_output_stream_t
  lower_self.__handle = C.int32_t(self)
  lower_len := C.uint64_t(len)
  var ret C.wasi_io_streams_result_void_stream_error_t
  C.wasi_io_streams_method_output_stream_write_zeroes(lower_self , lower_len , &ret )
  var lift_ret Result[struct{}, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiIo0_2_0_StreamsOutputStream) BlockingWriteZeroesAndFlush(len uint64) Result[struct{}, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_output_stream_t
  lower_self.__handle = C.int32_t(self)
  lower_len := C.uint64_t(len)
  var ret C.wasi_io_streams_result_void_stream_error_t
  C.wasi_io_streams_method_output_stream_blocking_write_zeroes_and_flush(lower_self , lower_len , &ret )
  var lift_ret Result[struct{}, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiIo0_2_0_StreamsOutputStream) Splice(src WasiIo0_2_0_StreamsInputStream, len uint64) Result[uint64, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_output_stream_t
  lower_self.__handle = C.int32_t(self)
  var lower_src C.wasi_io_streams_borrow_input_stream_t
  lower_src.__handle = C.int32_t(src)
  lower_len := C.uint64_t(len)
  var ret C.wasi_io_streams_result_u64_stream_error_t
  C.wasi_io_streams_method_output_stream_splice(lower_self , lower_src , lower_len , &ret )
  var lift_ret Result[uint64, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.uint64_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint64
    lift_ret_val = uint64(lift_ret_ptr)
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiIo0_2_0_StreamsOutputStream) BlockingSplice(src WasiIo0_2_0_StreamsInputStream, len uint64) Result[uint64, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_output_stream_t
  lower_self.__handle = C.int32_t(self)
  var lower_src C.wasi_io_streams_borrow_input_stream_t
  lower_src.__handle = C.int32_t(src)
  lower_len := C.uint64_t(len)
  var ret C.wasi_io_streams_result_u64_stream_error_t
  C.wasi_io_streams_method_output_stream_blocking_splice(lower_self , lower_src , lower_len , &ret )
  var lift_ret Result[uint64, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.uint64_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint64
    lift_ret_val = uint64(lift_ret_ptr)
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

// Import functions from wasi:cli/stdin@0.2.0
type WasiCli0_2_0_StdinInputStream = WasiIo0_2_0_StreamsInputStream
func WasiCli0_2_0_StdinGetStdin() WasiCli0_2_0_StdinInputStream {
  ret := C.wasi_cli_stdin_get_stdin()
  var lift_ret WasiCli0_2_0_StdinInputStream
  lift_ret = WasiCli0_2_0_StdinInputStream(ret.__handle)

  return lift_ret
}

// Import functions from wasi:cli/stdout@0.2.0
type WasiCli0_2_0_StdoutOutputStream = WasiIo0_2_0_StreamsOutputStream
func WasiCli0_2_0_StdoutGetStdout() WasiCli0_2_0_StdoutOutputStream {
  ret := C.wasi_cli_stdout_get_stdout()
  var lift_ret WasiCli0_2_0_StdoutOutputStream
  lift_ret = WasiCli0_2_0_StdoutOutputStream(ret.__handle)

  return lift_ret
}

// Import functions from wasi:cli/stderr@0.2.0
type WasiCli0_2_0_StderrOutputStream = WasiIo0_2_0_StreamsOutputStream
func WasiCli0_2_0_StderrGetStderr() WasiCli0_2_0_StderrOutputStream {
  ret := C.wasi_cli_stderr_get_stderr()
  var lift_ret WasiCli0_2_0_StderrOutputStream
  lift_ret = WasiCli0_2_0_StderrOutputStream(ret.__handle)

  return lift_ret
}

// Import functions from wasi:cli/terminal-input@0.2.0
// WasiCli0_2_0_TerminalInputTerminalInput is a handle to imported resource terminal-input
type WasiCli0_2_0_TerminalInputTerminalInput int32

//go:wasmimport wasi:cli/terminal-input@0.2.0 [resource-drop]terminal-input
func _WasiCli0_2_0_TerminalInputTerminalInput_drop(self WasiCli0_2_0_TerminalInputTerminalInput)

func (self WasiCli0_2_0_TerminalInputTerminalInput) Drop() {
  _WasiCli0_2_0_TerminalInputTerminalInput_drop(self)
}

// Import functions from wasi:cli/terminal-output@0.2.0
// WasiCli0_2_0_TerminalOutputTerminalOutput is a handle to imported resource terminal-output
type WasiCli0_2_0_TerminalOutputTerminalOutput int32

//go:wasmimport wasi:cli/terminal-output@0.2.0 [resource-drop]terminal-output
func _WasiCli0_2_0_TerminalOutputTerminalOutput_drop(self WasiCli0_2_0_TerminalOutputTerminalOutput)

func (self WasiCli0_2_0_TerminalOutputTerminalOutput) Drop() {
  _WasiCli0_2_0_TerminalOutputTerminalOutput_drop(self)
}

// Import functions from wasi:cli/terminal-stdin@0.2.0
type WasiCli0_2_0_TerminalStdinTerminalInput = WasiCli0_2_0_TerminalInputTerminalInput
func WasiCli0_2_0_TerminalStdinGetTerminalStdin() Option[WasiCli0_2_0_TerminalStdinTerminalInput] {
  var ret C.wasi_cli_terminal_stdin_option_own_terminal_input_t
  C.wasi_cli_terminal_stdin_get_terminal_stdin(&ret )
  var lift_ret Option[WasiCli0_2_0_TerminalStdinTerminalInput]
  if ret.is_some {
    var lift_ret_val WasiCli0_2_0_TerminalStdinTerminalInput
    lift_ret_val = WasiCli0_2_0_TerminalStdinTerminalInput(ret.val.__handle)
    
    lift_ret.Set(lift_ret_val)
  } else {
    lift_ret.Unset()
  }
  return lift_ret
}

// Import functions from wasi:cli/terminal-stdout@0.2.0
type WasiCli0_2_0_TerminalStdoutTerminalOutput = WasiCli0_2_0_TerminalOutputTerminalOutput
func WasiCli0_2_0_TerminalStdoutGetTerminalStdout() Option[WasiCli0_2_0_TerminalStdoutTerminalOutput] {
  var ret C.wasi_cli_terminal_stdout_option_own_terminal_output_t
  C.wasi_cli_terminal_stdout_get_terminal_stdout(&ret )
  var lift_ret Option[WasiCli0_2_0_TerminalStdoutTerminalOutput]
  if ret.is_some {
    var lift_ret_val WasiCli0_2_0_TerminalStdoutTerminalOutput
    lift_ret_val = WasiCli0_2_0_TerminalStdoutTerminalOutput(ret.val.__handle)
    
    lift_ret.Set(lift_ret_val)
  } else {
    lift_ret.Unset()
  }
  return lift_ret
}

// Import functions from wasi:cli/terminal-stderr@0.2.0
type WasiCli0_2_0_TerminalStderrTerminalOutput = WasiCli0_2_0_TerminalOutputTerminalOutput
func WasiCli0_2_0_TerminalStderrGetTerminalStderr() Option[WasiCli0_2_0_TerminalStderrTerminalOutput] {
  var ret C.wasi_cli_terminal_stderr_option_own_terminal_output_t
  C.wasi_cli_terminal_stderr_get_terminal_stderr(&ret )
  var lift_ret Option[WasiCli0_2_0_TerminalStderrTerminalOutput]
  if ret.is_some {
    var lift_ret_val WasiCli0_2_0_TerminalStderrTerminalOutput
    lift_ret_val = WasiCli0_2_0_TerminalStderrTerminalOutput(ret.val.__handle)
    
    lift_ret.Set(lift_ret_val)
  } else {
    lift_ret.Unset()
  }
  return lift_ret
}

// Import functions from wasi:clocks/monotonic-clock@0.2.0
type WasiClocks0_2_0_MonotonicClockPollable = WasiIo0_2_0_PollPollable
type WasiClocks0_2_0_MonotonicClockInstant = uint64
type WasiClocks0_2_0_MonotonicClockDuration = uint64
func WasiClocks0_2_0_MonotonicClockNow() WasiClocks0_2_0_MonotonicClockInstant {
  ret := C.wasi_clocks_monotonic_clock_now()
  var lift_ret WasiClocks0_2_0_MonotonicClockInstant
  var lift_ret_val uint64
  lift_ret_val = uint64(ret)
  lift_ret = lift_ret_val
  return lift_ret
}

func WasiClocks0_2_0_MonotonicClockResolution() WasiClocks0_2_0_MonotonicClockDuration {
  ret := C.wasi_clocks_monotonic_clock_resolution()
  var lift_ret WasiClocks0_2_0_MonotonicClockDuration
  var lift_ret_val uint64
  lift_ret_val = uint64(ret)
  lift_ret = lift_ret_val
  return lift_ret
}

func WasiClocks0_2_0_MonotonicClockSubscribeInstant(when WasiClocks0_2_0_MonotonicClockInstant) WasiClocks0_2_0_MonotonicClockPollable {
  var lower_when C.uint64_t
  lower_when_val := C.uint64_t(when)
  lower_when = lower_when_val
  ret := C.wasi_clocks_monotonic_clock_subscribe_instant(lower_when )
  var lift_ret WasiClocks0_2_0_MonotonicClockPollable
  lift_ret = WasiClocks0_2_0_MonotonicClockPollable(ret.__handle)

  return lift_ret
}

func WasiClocks0_2_0_MonotonicClockSubscribeDuration(when WasiClocks0_2_0_MonotonicClockDuration) WasiClocks0_2_0_MonotonicClockPollable {
  var lower_when C.uint64_t
  lower_when_val := C.uint64_t(when)
  lower_when = lower_when_val
  ret := C.wasi_clocks_monotonic_clock_subscribe_duration(lower_when )
  var lift_ret WasiClocks0_2_0_MonotonicClockPollable
  lift_ret = WasiClocks0_2_0_MonotonicClockPollable(ret.__handle)

  return lift_ret
}

// Import functions from wasi:clocks/wall-clock@0.2.0
type WasiClocks0_2_0_WallClockDatetime struct {
  Seconds uint64
  Nanoseconds uint32
}

func WasiClocks0_2_0_WallClockNow() WasiClocks0_2_0_WallClockDatetime {
  var ret C.wasi_clocks_wall_clock_datetime_t
  C.wasi_clocks_wall_clock_now(&ret )
  var lift_ret WasiClocks0_2_0_WallClockDatetime
  var lift_ret_Seconds uint64
  lift_ret_Seconds = uint64(ret.seconds)
  lift_ret.Seconds = lift_ret_Seconds
  var lift_ret_Nanoseconds uint32
  lift_ret_Nanoseconds = uint32(ret.nanoseconds)
  lift_ret.Nanoseconds = lift_ret_Nanoseconds
  return lift_ret
}

func WasiClocks0_2_0_WallClockResolution() WasiClocks0_2_0_WallClockDatetime {
  var ret C.wasi_clocks_wall_clock_datetime_t
  C.wasi_clocks_wall_clock_resolution(&ret )
  var lift_ret WasiClocks0_2_0_WallClockDatetime
  var lift_ret_Seconds uint64
  lift_ret_Seconds = uint64(ret.seconds)
  lift_ret.Seconds = lift_ret_Seconds
  var lift_ret_Nanoseconds uint32
  lift_ret_Nanoseconds = uint32(ret.nanoseconds)
  lift_ret.Nanoseconds = lift_ret_Nanoseconds
  return lift_ret
}

// Import functions from wasi:filesystem/types@0.2.0
type WasiFilesystem0_2_0_TypesInputStream = WasiIo0_2_0_StreamsInputStream
type WasiFilesystem0_2_0_TypesOutputStream = WasiIo0_2_0_StreamsOutputStream
type WasiFilesystem0_2_0_TypesError = WasiIo0_2_0_StreamsError
type WasiFilesystem0_2_0_TypesDatetime = WasiClocks0_2_0_WallClockDatetime
type WasiFilesystem0_2_0_TypesFilesize = uint64
type WasiFilesystem0_2_0_TypesDescriptorTypeKind int

const (
WasiFilesystem0_2_0_TypesDescriptorTypeKindUnknown WasiFilesystem0_2_0_TypesDescriptorTypeKind = iota
WasiFilesystem0_2_0_TypesDescriptorTypeKindBlockDevice
WasiFilesystem0_2_0_TypesDescriptorTypeKindCharacterDevice
WasiFilesystem0_2_0_TypesDescriptorTypeKindDirectory
WasiFilesystem0_2_0_TypesDescriptorTypeKindFifo
WasiFilesystem0_2_0_TypesDescriptorTypeKindSymbolicLink
WasiFilesystem0_2_0_TypesDescriptorTypeKindRegularFile
WasiFilesystem0_2_0_TypesDescriptorTypeKindSocket
)

type WasiFilesystem0_2_0_TypesDescriptorType struct {
  kind WasiFilesystem0_2_0_TypesDescriptorTypeKind
}

func (n WasiFilesystem0_2_0_TypesDescriptorType) Kind() WasiFilesystem0_2_0_TypesDescriptorTypeKind {
  return n.kind
}

func WasiFilesystem0_2_0_TypesDescriptorTypeUnknown() WasiFilesystem0_2_0_TypesDescriptorType{
  return WasiFilesystem0_2_0_TypesDescriptorType{kind: WasiFilesystem0_2_0_TypesDescriptorTypeKindUnknown}
}

func WasiFilesystem0_2_0_TypesDescriptorTypeBlockDevice() WasiFilesystem0_2_0_TypesDescriptorType{
  return WasiFilesystem0_2_0_TypesDescriptorType{kind: WasiFilesystem0_2_0_TypesDescriptorTypeKindBlockDevice}
}

func WasiFilesystem0_2_0_TypesDescriptorTypeCharacterDevice() WasiFilesystem0_2_0_TypesDescriptorType{
  return WasiFilesystem0_2_0_TypesDescriptorType{kind: WasiFilesystem0_2_0_TypesDescriptorTypeKindCharacterDevice}
}

func WasiFilesystem0_2_0_TypesDescriptorTypeDirectory() WasiFilesystem0_2_0_TypesDescriptorType{
  return WasiFilesystem0_2_0_TypesDescriptorType{kind: WasiFilesystem0_2_0_TypesDescriptorTypeKindDirectory}
}

func WasiFilesystem0_2_0_TypesDescriptorTypeFifo() WasiFilesystem0_2_0_TypesDescriptorType{
  return WasiFilesystem0_2_0_TypesDescriptorType{kind: WasiFilesystem0_2_0_TypesDescriptorTypeKindFifo}
}

func WasiFilesystem0_2_0_TypesDescriptorTypeSymbolicLink() WasiFilesystem0_2_0_TypesDescriptorType{
  return WasiFilesystem0_2_0_TypesDescriptorType{kind: WasiFilesystem0_2_0_TypesDescriptorTypeKindSymbolicLink}
}

func WasiFilesystem0_2_0_TypesDescriptorTypeRegularFile() WasiFilesystem0_2_0_TypesDescriptorType{
  return WasiFilesystem0_2_0_TypesDescriptorType{kind: WasiFilesystem0_2_0_TypesDescriptorTypeKindRegularFile}
}

func WasiFilesystem0_2_0_TypesDescriptorTypeSocket() WasiFilesystem0_2_0_TypesDescriptorType{
  return WasiFilesystem0_2_0_TypesDescriptorType{kind: WasiFilesystem0_2_0_TypesDescriptorTypeKindSocket}
}

type WasiFilesystem0_2_0_TypesDescriptorFlags uint64
const (
WasiFilesystem0_2_0_TypesDescriptorFlags_Read WasiFilesystem0_2_0_TypesDescriptorFlags = 1 << iota
WasiFilesystem0_2_0_TypesDescriptorFlags_Write
WasiFilesystem0_2_0_TypesDescriptorFlags_FileIntegritySync
WasiFilesystem0_2_0_TypesDescriptorFlags_DataIntegritySync
WasiFilesystem0_2_0_TypesDescriptorFlags_RequestedWriteSync
WasiFilesystem0_2_0_TypesDescriptorFlags_MutateDirectory
)

type WasiFilesystem0_2_0_TypesPathFlags uint64
const (
WasiFilesystem0_2_0_TypesPathFlags_SymlinkFollow WasiFilesystem0_2_0_TypesPathFlags = 1 << iota
)

type WasiFilesystem0_2_0_TypesOpenFlags uint64
const (
WasiFilesystem0_2_0_TypesOpenFlags_Create WasiFilesystem0_2_0_TypesOpenFlags = 1 << iota
WasiFilesystem0_2_0_TypesOpenFlags_Directory
WasiFilesystem0_2_0_TypesOpenFlags_Exclusive
WasiFilesystem0_2_0_TypesOpenFlags_Truncate
)

type WasiFilesystem0_2_0_TypesLinkCount = uint64
type WasiFilesystem0_2_0_TypesDescriptorStat struct {
  Type WasiFilesystem0_2_0_TypesDescriptorType
  LinkCount WasiFilesystem0_2_0_TypesLinkCount
  Size WasiFilesystem0_2_0_TypesFilesize
  DataAccessTimestamp Option[WasiFilesystem0_2_0_TypesDatetime]
  DataModificationTimestamp Option[WasiFilesystem0_2_0_TypesDatetime]
  StatusChangeTimestamp Option[WasiFilesystem0_2_0_TypesDatetime]
}

type WasiFilesystem0_2_0_TypesNewTimestampKind int

const (
WasiFilesystem0_2_0_TypesNewTimestampKindNoChange WasiFilesystem0_2_0_TypesNewTimestampKind = iota
WasiFilesystem0_2_0_TypesNewTimestampKindNow
WasiFilesystem0_2_0_TypesNewTimestampKindTimestamp
)

type WasiFilesystem0_2_0_TypesNewTimestamp struct {
  kind WasiFilesystem0_2_0_TypesNewTimestampKind
  val any
}

func (n WasiFilesystem0_2_0_TypesNewTimestamp) Kind() WasiFilesystem0_2_0_TypesNewTimestampKind {
  return n.kind
}

func WasiFilesystem0_2_0_TypesNewTimestampNoChange() WasiFilesystem0_2_0_TypesNewTimestamp{
  return WasiFilesystem0_2_0_TypesNewTimestamp{kind: WasiFilesystem0_2_0_TypesNewTimestampKindNoChange}
}

func WasiFilesystem0_2_0_TypesNewTimestampNow() WasiFilesystem0_2_0_TypesNewTimestamp{
  return WasiFilesystem0_2_0_TypesNewTimestamp{kind: WasiFilesystem0_2_0_TypesNewTimestampKindNow}
}

func WasiFilesystem0_2_0_TypesNewTimestampTimestamp(v WasiFilesystem0_2_0_TypesDatetime) WasiFilesystem0_2_0_TypesNewTimestamp{
  return WasiFilesystem0_2_0_TypesNewTimestamp{kind: WasiFilesystem0_2_0_TypesNewTimestampKindTimestamp, val: v}
}

func (n WasiFilesystem0_2_0_TypesNewTimestamp) GetTimestamp() WasiFilesystem0_2_0_TypesDatetime{
  if g, w := n.Kind(), WasiFilesystem0_2_0_TypesNewTimestampKindTimestamp; g != w {
    panic(fmt.Sprintf("Attr kind is %v, not %v", g, w))
  }
  return n.val.(WasiFilesystem0_2_0_TypesDatetime)
}

func (n *WasiFilesystem0_2_0_TypesNewTimestamp) SetTimestamp(v WasiFilesystem0_2_0_TypesDatetime) {
  n.val = v
  n.kind = WasiFilesystem0_2_0_TypesNewTimestampKindTimestamp
}

type WasiFilesystem0_2_0_TypesDirectoryEntry struct {
  Type WasiFilesystem0_2_0_TypesDescriptorType
  Name string
}

type WasiFilesystem0_2_0_TypesErrorCodeKind int

const (
WasiFilesystem0_2_0_TypesErrorCodeKindAccess WasiFilesystem0_2_0_TypesErrorCodeKind = iota
WasiFilesystem0_2_0_TypesErrorCodeKindWouldBlock
WasiFilesystem0_2_0_TypesErrorCodeKindAlready
WasiFilesystem0_2_0_TypesErrorCodeKindBadDescriptor
WasiFilesystem0_2_0_TypesErrorCodeKindBusy
WasiFilesystem0_2_0_TypesErrorCodeKindDeadlock
WasiFilesystem0_2_0_TypesErrorCodeKindQuota
WasiFilesystem0_2_0_TypesErrorCodeKindExist
WasiFilesystem0_2_0_TypesErrorCodeKindFileTooLarge
WasiFilesystem0_2_0_TypesErrorCodeKindIllegalByteSequence
WasiFilesystem0_2_0_TypesErrorCodeKindInProgress
WasiFilesystem0_2_0_TypesErrorCodeKindInterrupted
WasiFilesystem0_2_0_TypesErrorCodeKindInvalid
WasiFilesystem0_2_0_TypesErrorCodeKindIo
WasiFilesystem0_2_0_TypesErrorCodeKindIsDirectory
WasiFilesystem0_2_0_TypesErrorCodeKindLoop
WasiFilesystem0_2_0_TypesErrorCodeKindTooManyLinks
WasiFilesystem0_2_0_TypesErrorCodeKindMessageSize
WasiFilesystem0_2_0_TypesErrorCodeKindNameTooLong
WasiFilesystem0_2_0_TypesErrorCodeKindNoDevice
WasiFilesystem0_2_0_TypesErrorCodeKindNoEntry
WasiFilesystem0_2_0_TypesErrorCodeKindNoLock
WasiFilesystem0_2_0_TypesErrorCodeKindInsufficientMemory
WasiFilesystem0_2_0_TypesErrorCodeKindInsufficientSpace
WasiFilesystem0_2_0_TypesErrorCodeKindNotDirectory
WasiFilesystem0_2_0_TypesErrorCodeKindNotEmpty
WasiFilesystem0_2_0_TypesErrorCodeKindNotRecoverable
WasiFilesystem0_2_0_TypesErrorCodeKindUnsupported
WasiFilesystem0_2_0_TypesErrorCodeKindNoTty
WasiFilesystem0_2_0_TypesErrorCodeKindNoSuchDevice
WasiFilesystem0_2_0_TypesErrorCodeKindOverflow
WasiFilesystem0_2_0_TypesErrorCodeKindNotPermitted
WasiFilesystem0_2_0_TypesErrorCodeKindPipe
WasiFilesystem0_2_0_TypesErrorCodeKindReadOnly
WasiFilesystem0_2_0_TypesErrorCodeKindInvalidSeek
WasiFilesystem0_2_0_TypesErrorCodeKindTextFileBusy
WasiFilesystem0_2_0_TypesErrorCodeKindCrossDevice
)

type WasiFilesystem0_2_0_TypesErrorCode struct {
  kind WasiFilesystem0_2_0_TypesErrorCodeKind
}

func (n WasiFilesystem0_2_0_TypesErrorCode) Kind() WasiFilesystem0_2_0_TypesErrorCodeKind {
  return n.kind
}

func WasiFilesystem0_2_0_TypesErrorCodeAccess() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindAccess}
}

func WasiFilesystem0_2_0_TypesErrorCodeWouldBlock() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindWouldBlock}
}

func WasiFilesystem0_2_0_TypesErrorCodeAlready() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindAlready}
}

func WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindBadDescriptor}
}

func WasiFilesystem0_2_0_TypesErrorCodeBusy() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindBusy}
}

func WasiFilesystem0_2_0_TypesErrorCodeDeadlock() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindDeadlock}
}

func WasiFilesystem0_2_0_TypesErrorCodeQuota() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindQuota}
}

func WasiFilesystem0_2_0_TypesErrorCodeExist() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindExist}
}

func WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindFileTooLarge}
}

func WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindIllegalByteSequence}
}

func WasiFilesystem0_2_0_TypesErrorCodeInProgress() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindInProgress}
}

func WasiFilesystem0_2_0_TypesErrorCodeInterrupted() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindInterrupted}
}

func WasiFilesystem0_2_0_TypesErrorCodeInvalid() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindInvalid}
}

func WasiFilesystem0_2_0_TypesErrorCodeIo() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindIo}
}

func WasiFilesystem0_2_0_TypesErrorCodeIsDirectory() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindIsDirectory}
}

func WasiFilesystem0_2_0_TypesErrorCodeLoop() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindLoop}
}

func WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindTooManyLinks}
}

func WasiFilesystem0_2_0_TypesErrorCodeMessageSize() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindMessageSize}
}

func WasiFilesystem0_2_0_TypesErrorCodeNameTooLong() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindNameTooLong}
}

func WasiFilesystem0_2_0_TypesErrorCodeNoDevice() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindNoDevice}
}

func WasiFilesystem0_2_0_TypesErrorCodeNoEntry() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindNoEntry}
}

func WasiFilesystem0_2_0_TypesErrorCodeNoLock() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindNoLock}
}

func WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindInsufficientMemory}
}

func WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindInsufficientSpace}
}

func WasiFilesystem0_2_0_TypesErrorCodeNotDirectory() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindNotDirectory}
}

func WasiFilesystem0_2_0_TypesErrorCodeNotEmpty() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindNotEmpty}
}

func WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindNotRecoverable}
}

func WasiFilesystem0_2_0_TypesErrorCodeUnsupported() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindUnsupported}
}

func WasiFilesystem0_2_0_TypesErrorCodeNoTty() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindNoTty}
}

func WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindNoSuchDevice}
}

func WasiFilesystem0_2_0_TypesErrorCodeOverflow() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindOverflow}
}

func WasiFilesystem0_2_0_TypesErrorCodeNotPermitted() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindNotPermitted}
}

func WasiFilesystem0_2_0_TypesErrorCodePipe() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindPipe}
}

func WasiFilesystem0_2_0_TypesErrorCodeReadOnly() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindReadOnly}
}

func WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindInvalidSeek}
}

func WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindTextFileBusy}
}

func WasiFilesystem0_2_0_TypesErrorCodeCrossDevice() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindCrossDevice}
}

type WasiFilesystem0_2_0_TypesAdviceKind int

const (
WasiFilesystem0_2_0_TypesAdviceKindNormal WasiFilesystem0_2_0_TypesAdviceKind = iota
WasiFilesystem0_2_0_TypesAdviceKindSequential
WasiFilesystem0_2_0_TypesAdviceKindRandom
WasiFilesystem0_2_0_TypesAdviceKindWillNeed
WasiFilesystem0_2_0_TypesAdviceKindDontNeed
WasiFilesystem0_2_0_TypesAdviceKindNoReuse
)

type WasiFilesystem0_2_0_TypesAdvice struct {
  kind WasiFilesystem0_2_0_TypesAdviceKind
}

func (n WasiFilesystem0_2_0_TypesAdvice) Kind() WasiFilesystem0_2_0_TypesAdviceKind {
  return n.kind
}

func WasiFilesystem0_2_0_TypesAdviceNormal() WasiFilesystem0_2_0_TypesAdvice{
  return WasiFilesystem0_2_0_TypesAdvice{kind: WasiFilesystem0_2_0_TypesAdviceKindNormal}
}

func WasiFilesystem0_2_0_TypesAdviceSequential() WasiFilesystem0_2_0_TypesAdvice{
  return WasiFilesystem0_2_0_TypesAdvice{kind: WasiFilesystem0_2_0_TypesAdviceKindSequential}
}

func WasiFilesystem0_2_0_TypesAdviceRandom() WasiFilesystem0_2_0_TypesAdvice{
  return WasiFilesystem0_2_0_TypesAdvice{kind: WasiFilesystem0_2_0_TypesAdviceKindRandom}
}

func WasiFilesystem0_2_0_TypesAdviceWillNeed() WasiFilesystem0_2_0_TypesAdvice{
  return WasiFilesystem0_2_0_TypesAdvice{kind: WasiFilesystem0_2_0_TypesAdviceKindWillNeed}
}

func WasiFilesystem0_2_0_TypesAdviceDontNeed() WasiFilesystem0_2_0_TypesAdvice{
  return WasiFilesystem0_2_0_TypesAdvice{kind: WasiFilesystem0_2_0_TypesAdviceKindDontNeed}
}

func WasiFilesystem0_2_0_TypesAdviceNoReuse() WasiFilesystem0_2_0_TypesAdvice{
  return WasiFilesystem0_2_0_TypesAdvice{kind: WasiFilesystem0_2_0_TypesAdviceKindNoReuse}
}

type WasiFilesystem0_2_0_TypesMetadataHashValue struct {
  Lower uint64
  Upper uint64
}

// WasiFilesystem0_2_0_TypesDescriptor is a handle to imported resource descriptor
type WasiFilesystem0_2_0_TypesDescriptor int32

//go:wasmimport wasi:filesystem/types@0.2.0 [resource-drop]descriptor
func _WasiFilesystem0_2_0_TypesDescriptor_drop(self WasiFilesystem0_2_0_TypesDescriptor)

func (self WasiFilesystem0_2_0_TypesDescriptor) Drop() {
  _WasiFilesystem0_2_0_TypesDescriptor_drop(self)
}

// WasiFilesystem0_2_0_TypesDirectoryEntryStream is a handle to imported resource directory-entry-stream
type WasiFilesystem0_2_0_TypesDirectoryEntryStream int32

//go:wasmimport wasi:filesystem/types@0.2.0 [resource-drop]directory-entry-stream
func _WasiFilesystem0_2_0_TypesDirectoryEntryStream_drop(self WasiFilesystem0_2_0_TypesDirectoryEntryStream)

func (self WasiFilesystem0_2_0_TypesDirectoryEntryStream) Drop() {
  _WasiFilesystem0_2_0_TypesDirectoryEntryStream_drop(self)
}

type WasiFilesystem0_2_0_TypesTuple2ListU8TBoolT struct {
  F0 []uint8
  F1 bool
}

func (self WasiFilesystem0_2_0_TypesDescriptor) ReadViaStream(offset WasiFilesystem0_2_0_TypesFilesize) Result[WasiFilesystem0_2_0_TypesInputStream, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_offset C.uint64_t
  lower_offset_val := C.uint64_t(offset)
  lower_offset = lower_offset_val
  var ret C.wasi_filesystem_types_result_own_input_stream_error_code_t
  C.wasi_filesystem_types_method_descriptor_read_via_stream(lower_self , lower_offset , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesInputStream, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_own_input_stream_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesInputStream
    lift_ret_val = WasiFilesystem0_2_0_TypesInputStream(lift_ret_ptr.__handle)
    
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) WriteViaStream(offset WasiFilesystem0_2_0_TypesFilesize) Result[WasiFilesystem0_2_0_TypesOutputStream, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_offset C.uint64_t
  lower_offset_val := C.uint64_t(offset)
  lower_offset = lower_offset_val
  var ret C.wasi_filesystem_types_result_own_output_stream_error_code_t
  C.wasi_filesystem_types_method_descriptor_write_via_stream(lower_self , lower_offset , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesOutputStream, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_own_output_stream_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesOutputStream
    lift_ret_val = WasiFilesystem0_2_0_TypesOutputStream(lift_ret_ptr.__handle)
    
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) AppendViaStream() Result[WasiFilesystem0_2_0_TypesOutputStream, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_filesystem_types_result_own_output_stream_error_code_t
  C.wasi_filesystem_types_method_descriptor_append_via_stream(lower_self , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesOutputStream, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_own_output_stream_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesOutputStream
    lift_ret_val = WasiFilesystem0_2_0_TypesOutputStream(lift_ret_ptr.__handle)
    
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) Advise(offset WasiFilesystem0_2_0_TypesFilesize, length WasiFilesystem0_2_0_TypesFilesize, advice WasiFilesystem0_2_0_TypesAdvice) Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_offset C.uint64_t
  lower_offset_val := C.uint64_t(offset)
  lower_offset = lower_offset_val
  var lower_length C.uint64_t
  lower_length_val := C.uint64_t(length)
  lower_length = lower_length_val
  var lower_advice C.wasi_filesystem_types_advice_t
  if advice.Kind() == WasiFilesystem0_2_0_TypesAdviceKindNormal {
    lower_advice = 0
  }
  if advice.Kind() == WasiFilesystem0_2_0_TypesAdviceKindSequential {
    lower_advice = 1
  }
  if advice.Kind() == WasiFilesystem0_2_0_TypesAdviceKindRandom {
    lower_advice = 2
  }
  if advice.Kind() == WasiFilesystem0_2_0_TypesAdviceKindWillNeed {
    lower_advice = 3
  }
  if advice.Kind() == WasiFilesystem0_2_0_TypesAdviceKindDontNeed {
    lower_advice = 4
  }
  if advice.Kind() == WasiFilesystem0_2_0_TypesAdviceKindNoReuse {
    lower_advice = 5
  }
  var ret C.wasi_filesystem_types_result_void_error_code_t
  C.wasi_filesystem_types_method_descriptor_advise(lower_self , lower_offset , lower_length , lower_advice , &ret )
  var lift_ret Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) SyncData() Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_filesystem_types_result_void_error_code_t
  C.wasi_filesystem_types_method_descriptor_sync_data(lower_self , &ret )
  var lift_ret Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) GetFlags() Result[WasiFilesystem0_2_0_TypesDescriptorFlags, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_filesystem_types_result_descriptor_flags_error_code_t
  C.wasi_filesystem_types_method_descriptor_get_flags(lower_self , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesDescriptorFlags, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_descriptor_flags_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesDescriptorFlags
    lift_ret_val = WasiFilesystem0_2_0_TypesDescriptorFlags(lift_ret_ptr)
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) GetType() Result[WasiFilesystem0_2_0_TypesDescriptorType, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_filesystem_types_result_descriptor_type_error_code_t
  C.wasi_filesystem_types_method_descriptor_get_type(lower_self , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesDescriptorType, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_descriptor_type_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesDescriptorType
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesDescriptorTypeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesDescriptorTypeBlockDevice()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesDescriptorTypeCharacterDevice()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesDescriptorTypeDirectory()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesDescriptorTypeFifo()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesDescriptorTypeSymbolicLink()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesDescriptorTypeRegularFile()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesDescriptorTypeSocket()
    }
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) SetSize(size WasiFilesystem0_2_0_TypesFilesize) Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_size C.uint64_t
  lower_size_val := C.uint64_t(size)
  lower_size = lower_size_val
  var ret C.wasi_filesystem_types_result_void_error_code_t
  C.wasi_filesystem_types_method_descriptor_set_size(lower_self , lower_size , &ret )
  var lift_ret Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) SetTimes(data_access_timestamp WasiFilesystem0_2_0_TypesNewTimestamp, data_modification_timestamp WasiFilesystem0_2_0_TypesNewTimestamp) Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_data_access_timestamp C.wasi_filesystem_types_new_timestamp_t
  if data_access_timestamp.Kind() == WasiFilesystem0_2_0_TypesNewTimestampKindNoChange {
    lower_data_access_timestamp.tag = 0
  }
  if data_access_timestamp.Kind() == WasiFilesystem0_2_0_TypesNewTimestampKindNow {
    lower_data_access_timestamp.tag = 1
  }
  if data_access_timestamp.Kind() == WasiFilesystem0_2_0_TypesNewTimestampKindTimestamp {

    lower_data_access_timestamp.tag = 2
    lower_data_access_timestamp_ptr := (*C.wasi_filesystem_types_datetime_t)(unsafe.Pointer(&lower_data_access_timestamp.val))
    var lower_data_access_timestamp_val C.wasi_clocks_wall_clock_datetime_t
    var lower_data_access_timestamp_val_val C.wasi_clocks_wall_clock_datetime_t
    lower_data_access_timestamp_val_val_seconds := C.uint64_t(data_access_timestamp.GetTimestamp().Seconds)
    lower_data_access_timestamp_val_val.seconds = lower_data_access_timestamp_val_val_seconds
    lower_data_access_timestamp_val_val_nanoseconds := C.uint32_t(data_access_timestamp.GetTimestamp().Nanoseconds)
    lower_data_access_timestamp_val_val.nanoseconds = lower_data_access_timestamp_val_val_nanoseconds
    lower_data_access_timestamp_val = lower_data_access_timestamp_val_val
    *lower_data_access_timestamp_ptr = lower_data_access_timestamp_val
  }
  var lower_data_modification_timestamp C.wasi_filesystem_types_new_timestamp_t
  if data_modification_timestamp.Kind() == WasiFilesystem0_2_0_TypesNewTimestampKindNoChange {
    lower_data_modification_timestamp.tag = 0
  }
  if data_modification_timestamp.Kind() == WasiFilesystem0_2_0_TypesNewTimestampKindNow {
    lower_data_modification_timestamp.tag = 1
  }
  if data_modification_timestamp.Kind() == WasiFilesystem0_2_0_TypesNewTimestampKindTimestamp {

    lower_data_modification_timestamp.tag = 2
    lower_data_modification_timestamp_ptr := (*C.wasi_filesystem_types_datetime_t)(unsafe.Pointer(&lower_data_modification_timestamp.val))
    var lower_data_modification_timestamp_val C.wasi_clocks_wall_clock_datetime_t
    var lower_data_modification_timestamp_val_val C.wasi_clocks_wall_clock_datetime_t
    lower_data_modification_timestamp_val_val_seconds := C.uint64_t(data_modification_timestamp.GetTimestamp().Seconds)
    lower_data_modification_timestamp_val_val.seconds = lower_data_modification_timestamp_val_val_seconds
    lower_data_modification_timestamp_val_val_nanoseconds := C.uint32_t(data_modification_timestamp.GetTimestamp().Nanoseconds)
    lower_data_modification_timestamp_val_val.nanoseconds = lower_data_modification_timestamp_val_val_nanoseconds
    lower_data_modification_timestamp_val = lower_data_modification_timestamp_val_val
    *lower_data_modification_timestamp_ptr = lower_data_modification_timestamp_val
  }
  var ret C.wasi_filesystem_types_result_void_error_code_t
  C.wasi_filesystem_types_method_descriptor_set_times(lower_self , &lower_data_access_timestamp , &lower_data_modification_timestamp , &ret )
  var lift_ret Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) Read(length WasiFilesystem0_2_0_TypesFilesize, offset WasiFilesystem0_2_0_TypesFilesize) Result[WasiFilesystem0_2_0_TypesTuple2ListU8TBoolT, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_length C.uint64_t
  lower_length_val := C.uint64_t(length)
  lower_length = lower_length_val
  var lower_offset C.uint64_t
  lower_offset_val := C.uint64_t(offset)
  lower_offset = lower_offset_val
  var ret C.wasi_filesystem_types_result_tuple2_list_u8_bool_error_code_t
  C.wasi_filesystem_types_method_descriptor_read(lower_self , lower_length , lower_offset , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesTuple2ListU8TBoolT, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.frontend_tuple2_list_u8_bool_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesTuple2ListU8TBoolT
    var lift_ret_val_F0 []uint8
    lift_ret_val_F0 = make([]uint8, lift_ret_ptr.f0.len)
    if lift_ret_ptr.f0.len > 0 {
      for lift_ret_val_F0_i := 0; lift_ret_val_F0_i < int(lift_ret_ptr.f0.len); lift_ret_val_F0_i++ {
        var empty_lift_ret_val_F0 C.uint8_t
        lift_ret_val_F0_ptr := *(*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lift_ret_ptr.f0.ptr)) +
        uintptr(lift_ret_val_F0_i)*unsafe.Sizeof(empty_lift_ret_val_F0)))
        var list_lift_ret_val_F0 uint8
        list_lift_ret_val_F0 = uint8(lift_ret_val_F0_ptr)
        lift_ret_val_F0[lift_ret_val_F0_i] = list_lift_ret_val_F0
      }
    }
    lift_ret_val.F0 = lift_ret_val_F0
    lift_ret_val_F1 := lift_ret_ptr.f1
    lift_ret_val.F1 = lift_ret_val_F1
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) Write(buffer []uint8, offset WasiFilesystem0_2_0_TypesFilesize) Result[WasiFilesystem0_2_0_TypesFilesize, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_buffer C.frontend_list_u8_t
  if len(buffer) == 0 {
    lower_buffer.ptr = nil
    lower_buffer.len = 0
  } else {
    var empty_lower_buffer C.uint8_t
    lower_buffer.ptr = (*C.uint8_t)(C.malloc(C.size_t(len(buffer)) * C.size_t(unsafe.Sizeof(empty_lower_buffer))))
    lower_buffer.len = C.size_t(len(buffer))
    for lower_buffer_i := range buffer {
      lower_buffer_ptr := (*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_buffer.ptr)) +
      uintptr(lower_buffer_i)*unsafe.Sizeof(empty_lower_buffer)))
      lower_buffer_ptr_value := C.uint8_t(buffer[lower_buffer_i])
      *lower_buffer_ptr = lower_buffer_ptr_value
    }
  }
  var lower_offset C.uint64_t
  lower_offset_val := C.uint64_t(offset)
  lower_offset = lower_offset_val
  var ret C.wasi_filesystem_types_result_filesize_error_code_t
  C.wasi_filesystem_types_method_descriptor_write(lower_self , &lower_buffer , lower_offset , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesFilesize, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_filesize_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesFilesize
    var lift_ret_val_val uint64
    lift_ret_val_val = uint64(lift_ret_ptr)
    lift_ret_val = lift_ret_val_val
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) ReadDirectory() Result[WasiFilesystem0_2_0_TypesDirectoryEntryStream, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_filesystem_types_result_own_directory_entry_stream_error_code_t
  C.wasi_filesystem_types_method_descriptor_read_directory(lower_self , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesDirectoryEntryStream, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_own_directory_entry_stream_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesDirectoryEntryStream
    lift_ret_val = WasiFilesystem0_2_0_TypesDirectoryEntryStream(lift_ret_ptr.__handle)
    
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) Sync() Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_filesystem_types_result_void_error_code_t
  C.wasi_filesystem_types_method_descriptor_sync(lower_self , &ret )
  var lift_ret Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) CreateDirectoryAt(path string) Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_path C.frontend_string_t

  // use unsafe.Pointer to avoid copy
  lower_path.ptr = (*uint8)(unsafe.Pointer(C.CString(path)))
  lower_path.len = C.size_t(len(path))
  var ret C.wasi_filesystem_types_result_void_error_code_t
  C.wasi_filesystem_types_method_descriptor_create_directory_at(lower_self , &lower_path , &ret )
  var lift_ret Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) Stat() Result[WasiFilesystem0_2_0_TypesDescriptorStat, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_filesystem_types_result_descriptor_stat_error_code_t
  C.wasi_filesystem_types_method_descriptor_stat(lower_self , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesDescriptorStat, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_descriptor_stat_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesDescriptorStat
    var lift_ret_val_Type WasiFilesystem0_2_0_TypesDescriptorType
    if lift_ret_ptr._type == 0 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeUnknown()
    }
    if lift_ret_ptr._type == 1 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeBlockDevice()
    }
    if lift_ret_ptr._type == 2 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeCharacterDevice()
    }
    if lift_ret_ptr._type == 3 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeDirectory()
    }
    if lift_ret_ptr._type == 4 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeFifo()
    }
    if lift_ret_ptr._type == 5 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeSymbolicLink()
    }
    if lift_ret_ptr._type == 6 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeRegularFile()
    }
    if lift_ret_ptr._type == 7 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeSocket()
    }
    lift_ret_val.Type = lift_ret_val_Type
    var lift_ret_val_LinkCount WasiFilesystem0_2_0_TypesLinkCount
    var lift_ret_val_LinkCount_val uint64
    lift_ret_val_LinkCount_val = uint64(lift_ret_ptr.link_count)
    lift_ret_val_LinkCount = lift_ret_val_LinkCount_val
    lift_ret_val.LinkCount = lift_ret_val_LinkCount
    var lift_ret_val_Size WasiFilesystem0_2_0_TypesFilesize
    var lift_ret_val_Size_val uint64
    lift_ret_val_Size_val = uint64(lift_ret_ptr.size)
    lift_ret_val_Size = lift_ret_val_Size_val
    lift_ret_val.Size = lift_ret_val_Size
    var lift_ret_val_DataAccessTimestamp Option[WasiFilesystem0_2_0_TypesDatetime]
    if lift_ret_ptr.data_access_timestamp.is_some {
      var lift_ret_val_DataAccessTimestamp_val WasiFilesystem0_2_0_TypesDatetime
      var lift_ret_val_DataAccessTimestamp_val_val WasiClocks0_2_0_WallClockDatetime
      var lift_ret_val_DataAccessTimestamp_val_val_Seconds uint64
      lift_ret_val_DataAccessTimestamp_val_val_Seconds = uint64(lift_ret_ptr.data_access_timestamp.val.seconds)
      lift_ret_val_DataAccessTimestamp_val_val.Seconds = lift_ret_val_DataAccessTimestamp_val_val_Seconds
      var lift_ret_val_DataAccessTimestamp_val_val_Nanoseconds uint32
      lift_ret_val_DataAccessTimestamp_val_val_Nanoseconds = uint32(lift_ret_ptr.data_access_timestamp.val.nanoseconds)
      lift_ret_val_DataAccessTimestamp_val_val.Nanoseconds = lift_ret_val_DataAccessTimestamp_val_val_Nanoseconds
      lift_ret_val_DataAccessTimestamp_val = lift_ret_val_DataAccessTimestamp_val_val
      lift_ret_val_DataAccessTimestamp.Set(lift_ret_val_DataAccessTimestamp_val)
    } else {
      lift_ret_val_DataAccessTimestamp.Unset()
    }
    lift_ret_val.DataAccessTimestamp = lift_ret_val_DataAccessTimestamp
    var lift_ret_val_DataModificationTimestamp Option[WasiFilesystem0_2_0_TypesDatetime]
    if lift_ret_ptr.data_modification_timestamp.is_some {
      var lift_ret_val_DataModificationTimestamp_val WasiFilesystem0_2_0_TypesDatetime
      var lift_ret_val_DataModificationTimestamp_val_val WasiClocks0_2_0_WallClockDatetime
      var lift_ret_val_DataModificationTimestamp_val_val_Seconds uint64
      lift_ret_val_DataModificationTimestamp_val_val_Seconds = uint64(lift_ret_ptr.data_modification_timestamp.val.seconds)
      lift_ret_val_DataModificationTimestamp_val_val.Seconds = lift_ret_val_DataModificationTimestamp_val_val_Seconds
      var lift_ret_val_DataModificationTimestamp_val_val_Nanoseconds uint32
      lift_ret_val_DataModificationTimestamp_val_val_Nanoseconds = uint32(lift_ret_ptr.data_modification_timestamp.val.nanoseconds)
      lift_ret_val_DataModificationTimestamp_val_val.Nanoseconds = lift_ret_val_DataModificationTimestamp_val_val_Nanoseconds
      lift_ret_val_DataModificationTimestamp_val = lift_ret_val_DataModificationTimestamp_val_val
      lift_ret_val_DataModificationTimestamp.Set(lift_ret_val_DataModificationTimestamp_val)
    } else {
      lift_ret_val_DataModificationTimestamp.Unset()
    }
    lift_ret_val.DataModificationTimestamp = lift_ret_val_DataModificationTimestamp
    var lift_ret_val_StatusChangeTimestamp Option[WasiFilesystem0_2_0_TypesDatetime]
    if lift_ret_ptr.status_change_timestamp.is_some {
      var lift_ret_val_StatusChangeTimestamp_val WasiFilesystem0_2_0_TypesDatetime
      var lift_ret_val_StatusChangeTimestamp_val_val WasiClocks0_2_0_WallClockDatetime
      var lift_ret_val_StatusChangeTimestamp_val_val_Seconds uint64
      lift_ret_val_StatusChangeTimestamp_val_val_Seconds = uint64(lift_ret_ptr.status_change_timestamp.val.seconds)
      lift_ret_val_StatusChangeTimestamp_val_val.Seconds = lift_ret_val_StatusChangeTimestamp_val_val_Seconds
      var lift_ret_val_StatusChangeTimestamp_val_val_Nanoseconds uint32
      lift_ret_val_StatusChangeTimestamp_val_val_Nanoseconds = uint32(lift_ret_ptr.status_change_timestamp.val.nanoseconds)
      lift_ret_val_StatusChangeTimestamp_val_val.Nanoseconds = lift_ret_val_StatusChangeTimestamp_val_val_Nanoseconds
      lift_ret_val_StatusChangeTimestamp_val = lift_ret_val_StatusChangeTimestamp_val_val
      lift_ret_val_StatusChangeTimestamp.Set(lift_ret_val_StatusChangeTimestamp_val)
    } else {
      lift_ret_val_StatusChangeTimestamp.Unset()
    }
    lift_ret_val.StatusChangeTimestamp = lift_ret_val_StatusChangeTimestamp
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) StatAt(path_flags WasiFilesystem0_2_0_TypesPathFlags, path string) Result[WasiFilesystem0_2_0_TypesDescriptorStat, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  lower_path_flags := C.uint8_t(path_flags)
  var lower_path C.frontend_string_t

  // use unsafe.Pointer to avoid copy
  lower_path.ptr = (*uint8)(unsafe.Pointer(C.CString(path)))
  lower_path.len = C.size_t(len(path))
  var ret C.wasi_filesystem_types_result_descriptor_stat_error_code_t
  C.wasi_filesystem_types_method_descriptor_stat_at(lower_self , lower_path_flags , &lower_path , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesDescriptorStat, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_descriptor_stat_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesDescriptorStat
    var lift_ret_val_Type WasiFilesystem0_2_0_TypesDescriptorType
    if lift_ret_ptr._type == 0 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeUnknown()
    }
    if lift_ret_ptr._type == 1 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeBlockDevice()
    }
    if lift_ret_ptr._type == 2 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeCharacterDevice()
    }
    if lift_ret_ptr._type == 3 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeDirectory()
    }
    if lift_ret_ptr._type == 4 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeFifo()
    }
    if lift_ret_ptr._type == 5 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeSymbolicLink()
    }
    if lift_ret_ptr._type == 6 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeRegularFile()
    }
    if lift_ret_ptr._type == 7 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeSocket()
    }
    lift_ret_val.Type = lift_ret_val_Type
    var lift_ret_val_LinkCount WasiFilesystem0_2_0_TypesLinkCount
    var lift_ret_val_LinkCount_val uint64
    lift_ret_val_LinkCount_val = uint64(lift_ret_ptr.link_count)
    lift_ret_val_LinkCount = lift_ret_val_LinkCount_val
    lift_ret_val.LinkCount = lift_ret_val_LinkCount
    var lift_ret_val_Size WasiFilesystem0_2_0_TypesFilesize
    var lift_ret_val_Size_val uint64
    lift_ret_val_Size_val = uint64(lift_ret_ptr.size)
    lift_ret_val_Size = lift_ret_val_Size_val
    lift_ret_val.Size = lift_ret_val_Size
    var lift_ret_val_DataAccessTimestamp Option[WasiFilesystem0_2_0_TypesDatetime]
    if lift_ret_ptr.data_access_timestamp.is_some {
      var lift_ret_val_DataAccessTimestamp_val WasiFilesystem0_2_0_TypesDatetime
      var lift_ret_val_DataAccessTimestamp_val_val WasiClocks0_2_0_WallClockDatetime
      var lift_ret_val_DataAccessTimestamp_val_val_Seconds uint64
      lift_ret_val_DataAccessTimestamp_val_val_Seconds = uint64(lift_ret_ptr.data_access_timestamp.val.seconds)
      lift_ret_val_DataAccessTimestamp_val_val.Seconds = lift_ret_val_DataAccessTimestamp_val_val_Seconds
      var lift_ret_val_DataAccessTimestamp_val_val_Nanoseconds uint32
      lift_ret_val_DataAccessTimestamp_val_val_Nanoseconds = uint32(lift_ret_ptr.data_access_timestamp.val.nanoseconds)
      lift_ret_val_DataAccessTimestamp_val_val.Nanoseconds = lift_ret_val_DataAccessTimestamp_val_val_Nanoseconds
      lift_ret_val_DataAccessTimestamp_val = lift_ret_val_DataAccessTimestamp_val_val
      lift_ret_val_DataAccessTimestamp.Set(lift_ret_val_DataAccessTimestamp_val)
    } else {
      lift_ret_val_DataAccessTimestamp.Unset()
    }
    lift_ret_val.DataAccessTimestamp = lift_ret_val_DataAccessTimestamp
    var lift_ret_val_DataModificationTimestamp Option[WasiFilesystem0_2_0_TypesDatetime]
    if lift_ret_ptr.data_modification_timestamp.is_some {
      var lift_ret_val_DataModificationTimestamp_val WasiFilesystem0_2_0_TypesDatetime
      var lift_ret_val_DataModificationTimestamp_val_val WasiClocks0_2_0_WallClockDatetime
      var lift_ret_val_DataModificationTimestamp_val_val_Seconds uint64
      lift_ret_val_DataModificationTimestamp_val_val_Seconds = uint64(lift_ret_ptr.data_modification_timestamp.val.seconds)
      lift_ret_val_DataModificationTimestamp_val_val.Seconds = lift_ret_val_DataModificationTimestamp_val_val_Seconds
      var lift_ret_val_DataModificationTimestamp_val_val_Nanoseconds uint32
      lift_ret_val_DataModificationTimestamp_val_val_Nanoseconds = uint32(lift_ret_ptr.data_modification_timestamp.val.nanoseconds)
      lift_ret_val_DataModificationTimestamp_val_val.Nanoseconds = lift_ret_val_DataModificationTimestamp_val_val_Nanoseconds
      lift_ret_val_DataModificationTimestamp_val = lift_ret_val_DataModificationTimestamp_val_val
      lift_ret_val_DataModificationTimestamp.Set(lift_ret_val_DataModificationTimestamp_val)
    } else {
      lift_ret_val_DataModificationTimestamp.Unset()
    }
    lift_ret_val.DataModificationTimestamp = lift_ret_val_DataModificationTimestamp
    var lift_ret_val_StatusChangeTimestamp Option[WasiFilesystem0_2_0_TypesDatetime]
    if lift_ret_ptr.status_change_timestamp.is_some {
      var lift_ret_val_StatusChangeTimestamp_val WasiFilesystem0_2_0_TypesDatetime
      var lift_ret_val_StatusChangeTimestamp_val_val WasiClocks0_2_0_WallClockDatetime
      var lift_ret_val_StatusChangeTimestamp_val_val_Seconds uint64
      lift_ret_val_StatusChangeTimestamp_val_val_Seconds = uint64(lift_ret_ptr.status_change_timestamp.val.seconds)
      lift_ret_val_StatusChangeTimestamp_val_val.Seconds = lift_ret_val_StatusChangeTimestamp_val_val_Seconds
      var lift_ret_val_StatusChangeTimestamp_val_val_Nanoseconds uint32
      lift_ret_val_StatusChangeTimestamp_val_val_Nanoseconds = uint32(lift_ret_ptr.status_change_timestamp.val.nanoseconds)
      lift_ret_val_StatusChangeTimestamp_val_val.Nanoseconds = lift_ret_val_StatusChangeTimestamp_val_val_Nanoseconds
      lift_ret_val_StatusChangeTimestamp_val = lift_ret_val_StatusChangeTimestamp_val_val
      lift_ret_val_StatusChangeTimestamp.Set(lift_ret_val_StatusChangeTimestamp_val)
    } else {
      lift_ret_val_StatusChangeTimestamp.Unset()
    }
    lift_ret_val.StatusChangeTimestamp = lift_ret_val_StatusChangeTimestamp
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) SetTimesAt(path_flags WasiFilesystem0_2_0_TypesPathFlags, path string, data_access_timestamp WasiFilesystem0_2_0_TypesNewTimestamp, data_modification_timestamp WasiFilesystem0_2_0_TypesNewTimestamp) Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  lower_path_flags := C.uint8_t(path_flags)
  var lower_path C.frontend_string_t

  // use unsafe.Pointer to avoid copy
  lower_path.ptr = (*uint8)(unsafe.Pointer(C.CString(path)))
  lower_path.len = C.size_t(len(path))
  var lower_data_access_timestamp C.wasi_filesystem_types_new_timestamp_t
  if data_access_timestamp.Kind() == WasiFilesystem0_2_0_TypesNewTimestampKindNoChange {
    lower_data_access_timestamp.tag = 0
  }
  if data_access_timestamp.Kind() == WasiFilesystem0_2_0_TypesNewTimestampKindNow {
    lower_data_access_timestamp.tag = 1
  }
  if data_access_timestamp.Kind() == WasiFilesystem0_2_0_TypesNewTimestampKindTimestamp {

    lower_data_access_timestamp.tag = 2
    lower_data_access_timestamp_ptr := (*C.wasi_filesystem_types_datetime_t)(unsafe.Pointer(&lower_data_access_timestamp.val))
    var lower_data_access_timestamp_val C.wasi_clocks_wall_clock_datetime_t
    var lower_data_access_timestamp_val_val C.wasi_clocks_wall_clock_datetime_t
    lower_data_access_timestamp_val_val_seconds := C.uint64_t(data_access_timestamp.GetTimestamp().Seconds)
    lower_data_access_timestamp_val_val.seconds = lower_data_access_timestamp_val_val_seconds
    lower_data_access_timestamp_val_val_nanoseconds := C.uint32_t(data_access_timestamp.GetTimestamp().Nanoseconds)
    lower_data_access_timestamp_val_val.nanoseconds = lower_data_access_timestamp_val_val_nanoseconds
    lower_data_access_timestamp_val = lower_data_access_timestamp_val_val
    *lower_data_access_timestamp_ptr = lower_data_access_timestamp_val
  }
  var lower_data_modification_timestamp C.wasi_filesystem_types_new_timestamp_t
  if data_modification_timestamp.Kind() == WasiFilesystem0_2_0_TypesNewTimestampKindNoChange {
    lower_data_modification_timestamp.tag = 0
  }
  if data_modification_timestamp.Kind() == WasiFilesystem0_2_0_TypesNewTimestampKindNow {
    lower_data_modification_timestamp.tag = 1
  }
  if data_modification_timestamp.Kind() == WasiFilesystem0_2_0_TypesNewTimestampKindTimestamp {

    lower_data_modification_timestamp.tag = 2
    lower_data_modification_timestamp_ptr := (*C.wasi_filesystem_types_datetime_t)(unsafe.Pointer(&lower_data_modification_timestamp.val))
    var lower_data_modification_timestamp_val C.wasi_clocks_wall_clock_datetime_t
    var lower_data_modification_timestamp_val_val C.wasi_clocks_wall_clock_datetime_t
    lower_data_modification_timestamp_val_val_seconds := C.uint64_t(data_modification_timestamp.GetTimestamp().Seconds)
    lower_data_modification_timestamp_val_val.seconds = lower_data_modification_timestamp_val_val_seconds
    lower_data_modification_timestamp_val_val_nanoseconds := C.uint32_t(data_modification_timestamp.GetTimestamp().Nanoseconds)
    lower_data_modification_timestamp_val_val.nanoseconds = lower_data_modification_timestamp_val_val_nanoseconds
    lower_data_modification_timestamp_val = lower_data_modification_timestamp_val_val
    *lower_data_modification_timestamp_ptr = lower_data_modification_timestamp_val
  }
  var ret C.wasi_filesystem_types_result_void_error_code_t
  C.wasi_filesystem_types_method_descriptor_set_times_at(lower_self , lower_path_flags , &lower_path , &lower_data_access_timestamp , &lower_data_modification_timestamp , &ret )
  var lift_ret Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) LinkAt(old_path_flags WasiFilesystem0_2_0_TypesPathFlags, old_path string, new_descriptor WasiFilesystem0_2_0_TypesDescriptor, new_path string) Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  lower_old_path_flags := C.uint8_t(old_path_flags)
  var lower_old_path C.frontend_string_t

  // use unsafe.Pointer to avoid copy
  lower_old_path.ptr = (*uint8)(unsafe.Pointer(C.CString(old_path)))
  lower_old_path.len = C.size_t(len(old_path))
  var lower_new_descriptor C.wasi_filesystem_types_borrow_descriptor_t
  lower_new_descriptor.__handle = C.int32_t(new_descriptor)
  var lower_new_path C.frontend_string_t

  // use unsafe.Pointer to avoid copy
  lower_new_path.ptr = (*uint8)(unsafe.Pointer(C.CString(new_path)))
  lower_new_path.len = C.size_t(len(new_path))
  var ret C.wasi_filesystem_types_result_void_error_code_t
  C.wasi_filesystem_types_method_descriptor_link_at(lower_self , lower_old_path_flags , &lower_old_path , lower_new_descriptor , &lower_new_path , &ret )
  var lift_ret Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) OpenAt(path_flags WasiFilesystem0_2_0_TypesPathFlags, path string, open_flags WasiFilesystem0_2_0_TypesOpenFlags, flags WasiFilesystem0_2_0_TypesDescriptorFlags) Result[WasiFilesystem0_2_0_TypesDescriptor, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  lower_path_flags := C.uint8_t(path_flags)
  var lower_path C.frontend_string_t

  // use unsafe.Pointer to avoid copy
  lower_path.ptr = (*uint8)(unsafe.Pointer(C.CString(path)))
  lower_path.len = C.size_t(len(path))
  lower_open_flags := C.uint8_t(open_flags)
  lower_flags := C.uint8_t(flags)
  var ret C.wasi_filesystem_types_result_own_descriptor_error_code_t
  C.wasi_filesystem_types_method_descriptor_open_at(lower_self , lower_path_flags , &lower_path , lower_open_flags , lower_flags , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesDescriptor, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_own_descriptor_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesDescriptor
    lift_ret_val = WasiFilesystem0_2_0_TypesDescriptor(lift_ret_ptr.__handle)
    
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) ReadlinkAt(path string) Result[string, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_path C.frontend_string_t

  // use unsafe.Pointer to avoid copy
  lower_path.ptr = (*uint8)(unsafe.Pointer(C.CString(path)))
  lower_path.len = C.size_t(len(path))
  var ret C.wasi_filesystem_types_result_string_error_code_t
  C.wasi_filesystem_types_method_descriptor_readlink_at(lower_self , &lower_path , &ret )
  var lift_ret Result[string, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.frontend_string_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val string
    lift_ret_val = C.GoStringN((*C.char)(unsafe.Pointer(lift_ret_ptr.ptr)), C.int(lift_ret_ptr.len))
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) RemoveDirectoryAt(path string) Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_path C.frontend_string_t

  // use unsafe.Pointer to avoid copy
  lower_path.ptr = (*uint8)(unsafe.Pointer(C.CString(path)))
  lower_path.len = C.size_t(len(path))
  var ret C.wasi_filesystem_types_result_void_error_code_t
  C.wasi_filesystem_types_method_descriptor_remove_directory_at(lower_self , &lower_path , &ret )
  var lift_ret Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) RenameAt(old_path string, new_descriptor WasiFilesystem0_2_0_TypesDescriptor, new_path string) Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_old_path C.frontend_string_t

  // use unsafe.Pointer to avoid copy
  lower_old_path.ptr = (*uint8)(unsafe.Pointer(C.CString(old_path)))
  lower_old_path.len = C.size_t(len(old_path))
  var lower_new_descriptor C.wasi_filesystem_types_borrow_descriptor_t
  lower_new_descriptor.__handle = C.int32_t(new_descriptor)
  var lower_new_path C.frontend_string_t

  // use unsafe.Pointer to avoid copy
  lower_new_path.ptr = (*uint8)(unsafe.Pointer(C.CString(new_path)))
  lower_new_path.len = C.size_t(len(new_path))
  var ret C.wasi_filesystem_types_result_void_error_code_t
  C.wasi_filesystem_types_method_descriptor_rename_at(lower_self , &lower_old_path , lower_new_descriptor , &lower_new_path , &ret )
  var lift_ret Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) SymlinkAt(old_path string, new_path string) Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_old_path C.frontend_string_t

  // use unsafe.Pointer to avoid copy
  lower_old_path.ptr = (*uint8)(unsafe.Pointer(C.CString(old_path)))
  lower_old_path.len = C.size_t(len(old_path))
  var lower_new_path C.frontend_string_t

  // use unsafe.Pointer to avoid copy
  lower_new_path.ptr = (*uint8)(unsafe.Pointer(C.CString(new_path)))
  lower_new_path.len = C.size_t(len(new_path))
  var ret C.wasi_filesystem_types_result_void_error_code_t
  C.wasi_filesystem_types_method_descriptor_symlink_at(lower_self , &lower_old_path , &lower_new_path , &ret )
  var lift_ret Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) UnlinkFileAt(path string) Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_path C.frontend_string_t

  // use unsafe.Pointer to avoid copy
  lower_path.ptr = (*uint8)(unsafe.Pointer(C.CString(path)))
  lower_path.len = C.size_t(len(path))
  var ret C.wasi_filesystem_types_result_void_error_code_t
  C.wasi_filesystem_types_method_descriptor_unlink_file_at(lower_self , &lower_path , &ret )
  var lift_ret Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) IsSameObject(other WasiFilesystem0_2_0_TypesDescriptor) bool {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_other C.wasi_filesystem_types_borrow_descriptor_t
  lower_other.__handle = C.int32_t(other)
  ret := C.wasi_filesystem_types_method_descriptor_is_same_object(lower_self , lower_other )
  lift_ret := ret
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) MetadataHash() Result[WasiFilesystem0_2_0_TypesMetadataHashValue, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_filesystem_types_result_metadata_hash_value_error_code_t
  C.wasi_filesystem_types_method_descriptor_metadata_hash(lower_self , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesMetadataHashValue, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_metadata_hash_value_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesMetadataHashValue
    var lift_ret_val_Lower uint64
    lift_ret_val_Lower = uint64(lift_ret_ptr.lower)
    lift_ret_val.Lower = lift_ret_val_Lower
    var lift_ret_val_Upper uint64
    lift_ret_val_Upper = uint64(lift_ret_ptr.upper)
    lift_ret_val.Upper = lift_ret_val_Upper
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) MetadataHashAt(path_flags WasiFilesystem0_2_0_TypesPathFlags, path string) Result[WasiFilesystem0_2_0_TypesMetadataHashValue, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  lower_path_flags := C.uint8_t(path_flags)
  var lower_path C.frontend_string_t

  // use unsafe.Pointer to avoid copy
  lower_path.ptr = (*uint8)(unsafe.Pointer(C.CString(path)))
  lower_path.len = C.size_t(len(path))
  var ret C.wasi_filesystem_types_result_metadata_hash_value_error_code_t
  C.wasi_filesystem_types_method_descriptor_metadata_hash_at(lower_self , lower_path_flags , &lower_path , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesMetadataHashValue, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_metadata_hash_value_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesMetadataHashValue
    var lift_ret_val_Lower uint64
    lift_ret_val_Lower = uint64(lift_ret_ptr.lower)
    lift_ret_val.Lower = lift_ret_val_Lower
    var lift_ret_val_Upper uint64
    lift_ret_val_Upper = uint64(lift_ret_ptr.upper)
    lift_ret_val.Upper = lift_ret_val_Upper
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDirectoryEntryStream) ReadDirectoryEntry() Result[Option[WasiFilesystem0_2_0_TypesDirectoryEntry], WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_directory_entry_stream_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_filesystem_types_result_option_directory_entry_error_code_t
  C.wasi_filesystem_types_method_directory_entry_stream_read_directory_entry(lower_self , &ret )
  var lift_ret Result[Option[WasiFilesystem0_2_0_TypesDirectoryEntry], WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_option_directory_entry_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val Option[WasiFilesystem0_2_0_TypesDirectoryEntry]
    if lift_ret_ptr.is_some {
      var lift_ret_val_val WasiFilesystem0_2_0_TypesDirectoryEntry
      var lift_ret_val_val_Type WasiFilesystem0_2_0_TypesDescriptorType
      if lift_ret_ptr.val._type == 0 {
        lift_ret_val_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeUnknown()
      }
      if lift_ret_ptr.val._type == 1 {
        lift_ret_val_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeBlockDevice()
      }
      if lift_ret_ptr.val._type == 2 {
        lift_ret_val_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeCharacterDevice()
      }
      if lift_ret_ptr.val._type == 3 {
        lift_ret_val_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeDirectory()
      }
      if lift_ret_ptr.val._type == 4 {
        lift_ret_val_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeFifo()
      }
      if lift_ret_ptr.val._type == 5 {
        lift_ret_val_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeSymbolicLink()
      }
      if lift_ret_ptr.val._type == 6 {
        lift_ret_val_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeRegularFile()
      }
      if lift_ret_ptr.val._type == 7 {
        lift_ret_val_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeSocket()
      }
      lift_ret_val_val.Type = lift_ret_val_val_Type
      var lift_ret_val_val_Name string
      lift_ret_val_val_Name = C.GoStringN((*C.char)(unsafe.Pointer(lift_ret_ptr.val.name.ptr)), C.int(lift_ret_ptr.val.name.len))
      lift_ret_val_val.Name = lift_ret_val_val_Name
      lift_ret_val.Set(lift_ret_val_val)
    } else {
      lift_ret_val.Unset()
    }
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiFilesystem0_2_0_TypesFilesystemErrorCode(err WasiFilesystem0_2_0_TypesError) Option[WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_err C.wasi_filesystem_types_borrow_error_t
  lower_err.__handle = C.int32_t(err)
  var ret C.wasi_filesystem_types_option_error_code_t
  C.wasi_filesystem_types_filesystem_error_code(lower_err , &ret )
  var lift_ret Option[WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_some {
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if ret.val == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if ret.val == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if ret.val == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if ret.val == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if ret.val == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if ret.val == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if ret.val == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if ret.val == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if ret.val == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if ret.val == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if ret.val == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if ret.val == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if ret.val == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if ret.val == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if ret.val == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if ret.val == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if ret.val == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if ret.val == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if ret.val == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if ret.val == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if ret.val == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if ret.val == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if ret.val == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if ret.val == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if ret.val == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if ret.val == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if ret.val == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if ret.val == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if ret.val == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if ret.val == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if ret.val == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if ret.val == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if ret.val == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if ret.val == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if ret.val == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if ret.val == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if ret.val == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.Set(lift_ret_val)
  } else {
    lift_ret.Unset()
  }
  return lift_ret
}

// Import functions from wasi:filesystem/preopens@0.2.0
type WasiFilesystem0_2_0_PreopensDescriptor = WasiFilesystem0_2_0_TypesDescriptor
type WasiFilesystem0_2_0_PreopensTuple2DescriptorStringT struct {
  F0 WasiFilesystem0_2_0_PreopensDescriptor
  F1 string
}

func WasiFilesystem0_2_0_PreopensGetDirectories() []WasiFilesystem0_2_0_PreopensTuple2DescriptorStringT {
  var ret C.wasi_filesystem_preopens_list_tuple2_own_descriptor_string_t
  C.wasi_filesystem_preopens_get_directories(&ret )
  var lift_ret []WasiFilesystem0_2_0_PreopensTuple2DescriptorStringT
  lift_ret = make([]WasiFilesystem0_2_0_PreopensTuple2DescriptorStringT, ret.len)
  if ret.len > 0 {
    for lift_ret_i := 0; lift_ret_i < int(ret.len); lift_ret_i++ {
      var empty_lift_ret C.wasi_filesystem_preopens_tuple2_own_descriptor_string_t
      lift_ret_ptr := *(*C.wasi_filesystem_preopens_tuple2_own_descriptor_string_t)(unsafe.Pointer(uintptr(unsafe.Pointer(ret.ptr)) +
      uintptr(lift_ret_i)*unsafe.Sizeof(empty_lift_ret)))
      var list_lift_ret WasiFilesystem0_2_0_PreopensTuple2DescriptorStringT
      var list_lift_ret_F0 WasiFilesystem0_2_0_PreopensDescriptor
      list_lift_ret_F0 = WasiFilesystem0_2_0_PreopensDescriptor(lift_ret_ptr.f0.__handle)
      
      list_lift_ret.F0 = list_lift_ret_F0
      var list_lift_ret_F1 string
      list_lift_ret_F1 = C.GoStringN((*C.char)(unsafe.Pointer(lift_ret_ptr.f1.ptr)), C.int(lift_ret_ptr.f1.len))
      list_lift_ret.F1 = list_lift_ret_F1
      lift_ret[lift_ret_i] = list_lift_ret
    }
  }
  return lift_ret
}

// Import functions from wasi:sockets/network@0.2.0
// WasiSockets0_2_0_NetworkNetwork is a handle to imported resource network
type WasiSockets0_2_0_NetworkNetwork int32

//go:wasmimport wasi:sockets/network@0.2.0 [resource-drop]network
func _WasiSockets0_2_0_NetworkNetwork_drop(self WasiSockets0_2_0_NetworkNetwork)

func (self WasiSockets0_2_0_NetworkNetwork) Drop() {
  _WasiSockets0_2_0_NetworkNetwork_drop(self)
}

type WasiSockets0_2_0_NetworkErrorCodeKind int

const (
WasiSockets0_2_0_NetworkErrorCodeKindUnknown WasiSockets0_2_0_NetworkErrorCodeKind = iota
WasiSockets0_2_0_NetworkErrorCodeKindAccessDenied
WasiSockets0_2_0_NetworkErrorCodeKindNotSupported
WasiSockets0_2_0_NetworkErrorCodeKindInvalidArgument
WasiSockets0_2_0_NetworkErrorCodeKindOutOfMemory
WasiSockets0_2_0_NetworkErrorCodeKindTimeout
WasiSockets0_2_0_NetworkErrorCodeKindConcurrencyConflict
WasiSockets0_2_0_NetworkErrorCodeKindNotInProgress
WasiSockets0_2_0_NetworkErrorCodeKindWouldBlock
WasiSockets0_2_0_NetworkErrorCodeKindInvalidState
WasiSockets0_2_0_NetworkErrorCodeKindNewSocketLimit
WasiSockets0_2_0_NetworkErrorCodeKindAddressNotBindable
WasiSockets0_2_0_NetworkErrorCodeKindAddressInUse
WasiSockets0_2_0_NetworkErrorCodeKindRemoteUnreachable
WasiSockets0_2_0_NetworkErrorCodeKindConnectionRefused
WasiSockets0_2_0_NetworkErrorCodeKindConnectionReset
WasiSockets0_2_0_NetworkErrorCodeKindConnectionAborted
WasiSockets0_2_0_NetworkErrorCodeKindDatagramTooLarge
WasiSockets0_2_0_NetworkErrorCodeKindNameUnresolvable
WasiSockets0_2_0_NetworkErrorCodeKindTemporaryResolverFailure
WasiSockets0_2_0_NetworkErrorCodeKindPermanentResolverFailure
)

type WasiSockets0_2_0_NetworkErrorCode struct {
  kind WasiSockets0_2_0_NetworkErrorCodeKind
}

func (n WasiSockets0_2_0_NetworkErrorCode) Kind() WasiSockets0_2_0_NetworkErrorCodeKind {
  return n.kind
}

func WasiSockets0_2_0_NetworkErrorCodeUnknown() WasiSockets0_2_0_NetworkErrorCode{
  return WasiSockets0_2_0_NetworkErrorCode{kind: WasiSockets0_2_0_NetworkErrorCodeKindUnknown}
}

func WasiSockets0_2_0_NetworkErrorCodeAccessDenied() WasiSockets0_2_0_NetworkErrorCode{
  return WasiSockets0_2_0_NetworkErrorCode{kind: WasiSockets0_2_0_NetworkErrorCodeKindAccessDenied}
}

func WasiSockets0_2_0_NetworkErrorCodeNotSupported() WasiSockets0_2_0_NetworkErrorCode{
  return WasiSockets0_2_0_NetworkErrorCode{kind: WasiSockets0_2_0_NetworkErrorCodeKindNotSupported}
}

func WasiSockets0_2_0_NetworkErrorCodeInvalidArgument() WasiSockets0_2_0_NetworkErrorCode{
  return WasiSockets0_2_0_NetworkErrorCode{kind: WasiSockets0_2_0_NetworkErrorCodeKindInvalidArgument}
}

func WasiSockets0_2_0_NetworkErrorCodeOutOfMemory() WasiSockets0_2_0_NetworkErrorCode{
  return WasiSockets0_2_0_NetworkErrorCode{kind: WasiSockets0_2_0_NetworkErrorCodeKindOutOfMemory}
}

func WasiSockets0_2_0_NetworkErrorCodeTimeout() WasiSockets0_2_0_NetworkErrorCode{
  return WasiSockets0_2_0_NetworkErrorCode{kind: WasiSockets0_2_0_NetworkErrorCodeKindTimeout}
}

func WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict() WasiSockets0_2_0_NetworkErrorCode{
  return WasiSockets0_2_0_NetworkErrorCode{kind: WasiSockets0_2_0_NetworkErrorCodeKindConcurrencyConflict}
}

func WasiSockets0_2_0_NetworkErrorCodeNotInProgress() WasiSockets0_2_0_NetworkErrorCode{
  return WasiSockets0_2_0_NetworkErrorCode{kind: WasiSockets0_2_0_NetworkErrorCodeKindNotInProgress}
}

func WasiSockets0_2_0_NetworkErrorCodeWouldBlock() WasiSockets0_2_0_NetworkErrorCode{
  return WasiSockets0_2_0_NetworkErrorCode{kind: WasiSockets0_2_0_NetworkErrorCodeKindWouldBlock}
}

func WasiSockets0_2_0_NetworkErrorCodeInvalidState() WasiSockets0_2_0_NetworkErrorCode{
  return WasiSockets0_2_0_NetworkErrorCode{kind: WasiSockets0_2_0_NetworkErrorCodeKindInvalidState}
}

func WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit() WasiSockets0_2_0_NetworkErrorCode{
  return WasiSockets0_2_0_NetworkErrorCode{kind: WasiSockets0_2_0_NetworkErrorCodeKindNewSocketLimit}
}

func WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable() WasiSockets0_2_0_NetworkErrorCode{
  return WasiSockets0_2_0_NetworkErrorCode{kind: WasiSockets0_2_0_NetworkErrorCodeKindAddressNotBindable}
}

func WasiSockets0_2_0_NetworkErrorCodeAddressInUse() WasiSockets0_2_0_NetworkErrorCode{
  return WasiSockets0_2_0_NetworkErrorCode{kind: WasiSockets0_2_0_NetworkErrorCodeKindAddressInUse}
}

func WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable() WasiSockets0_2_0_NetworkErrorCode{
  return WasiSockets0_2_0_NetworkErrorCode{kind: WasiSockets0_2_0_NetworkErrorCodeKindRemoteUnreachable}
}

func WasiSockets0_2_0_NetworkErrorCodeConnectionRefused() WasiSockets0_2_0_NetworkErrorCode{
  return WasiSockets0_2_0_NetworkErrorCode{kind: WasiSockets0_2_0_NetworkErrorCodeKindConnectionRefused}
}

func WasiSockets0_2_0_NetworkErrorCodeConnectionReset() WasiSockets0_2_0_NetworkErrorCode{
  return WasiSockets0_2_0_NetworkErrorCode{kind: WasiSockets0_2_0_NetworkErrorCodeKindConnectionReset}
}

func WasiSockets0_2_0_NetworkErrorCodeConnectionAborted() WasiSockets0_2_0_NetworkErrorCode{
  return WasiSockets0_2_0_NetworkErrorCode{kind: WasiSockets0_2_0_NetworkErrorCodeKindConnectionAborted}
}

func WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge() WasiSockets0_2_0_NetworkErrorCode{
  return WasiSockets0_2_0_NetworkErrorCode{kind: WasiSockets0_2_0_NetworkErrorCodeKindDatagramTooLarge}
}

func WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable() WasiSockets0_2_0_NetworkErrorCode{
  return WasiSockets0_2_0_NetworkErrorCode{kind: WasiSockets0_2_0_NetworkErrorCodeKindNameUnresolvable}
}

func WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure() WasiSockets0_2_0_NetworkErrorCode{
  return WasiSockets0_2_0_NetworkErrorCode{kind: WasiSockets0_2_0_NetworkErrorCodeKindTemporaryResolverFailure}
}

func WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure() WasiSockets0_2_0_NetworkErrorCode{
  return WasiSockets0_2_0_NetworkErrorCode{kind: WasiSockets0_2_0_NetworkErrorCodeKindPermanentResolverFailure}
}

type WasiSockets0_2_0_NetworkIpAddressFamilyKind int

const (
WasiSockets0_2_0_NetworkIpAddressFamilyKindIpv4 WasiSockets0_2_0_NetworkIpAddressFamilyKind = iota
WasiSockets0_2_0_NetworkIpAddressFamilyKindIpv6
)

type WasiSockets0_2_0_NetworkIpAddressFamily struct {
  kind WasiSockets0_2_0_NetworkIpAddressFamilyKind
}

func (n WasiSockets0_2_0_NetworkIpAddressFamily) Kind() WasiSockets0_2_0_NetworkIpAddressFamilyKind {
  return n.kind
}

func WasiSockets0_2_0_NetworkIpAddressFamilyIpv4() WasiSockets0_2_0_NetworkIpAddressFamily{
  return WasiSockets0_2_0_NetworkIpAddressFamily{kind: WasiSockets0_2_0_NetworkIpAddressFamilyKindIpv4}
}

func WasiSockets0_2_0_NetworkIpAddressFamilyIpv6() WasiSockets0_2_0_NetworkIpAddressFamily{
  return WasiSockets0_2_0_NetworkIpAddressFamily{kind: WasiSockets0_2_0_NetworkIpAddressFamilyKindIpv6}
}

type WasiSockets0_2_0_NetworkIpv4Address struct {
  F0 uint8
  F1 uint8
  F2 uint8
  F3 uint8
}

type WasiSockets0_2_0_NetworkIpv6Address struct {
  F0 uint16
  F1 uint16
  F2 uint16
  F3 uint16
  F4 uint16
  F5 uint16
  F6 uint16
  F7 uint16
}

type WasiSockets0_2_0_NetworkIpAddressKind int

const (
WasiSockets0_2_0_NetworkIpAddressKindIpv4 WasiSockets0_2_0_NetworkIpAddressKind = iota
WasiSockets0_2_0_NetworkIpAddressKindIpv6
)

type WasiSockets0_2_0_NetworkIpAddress struct {
  kind WasiSockets0_2_0_NetworkIpAddressKind
  val any
}

func (n WasiSockets0_2_0_NetworkIpAddress) Kind() WasiSockets0_2_0_NetworkIpAddressKind {
  return n.kind
}

func WasiSockets0_2_0_NetworkIpAddressIpv4(v WasiSockets0_2_0_NetworkIpv4Address) WasiSockets0_2_0_NetworkIpAddress{
  return WasiSockets0_2_0_NetworkIpAddress{kind: WasiSockets0_2_0_NetworkIpAddressKindIpv4, val: v}
}

func (n WasiSockets0_2_0_NetworkIpAddress) GetIpv4() WasiSockets0_2_0_NetworkIpv4Address{
  if g, w := n.Kind(), WasiSockets0_2_0_NetworkIpAddressKindIpv4; g != w {
    panic(fmt.Sprintf("Attr kind is %v, not %v", g, w))
  }
  return n.val.(WasiSockets0_2_0_NetworkIpv4Address)
}

func (n *WasiSockets0_2_0_NetworkIpAddress) SetIpv4(v WasiSockets0_2_0_NetworkIpv4Address) {
  n.val = v
  n.kind = WasiSockets0_2_0_NetworkIpAddressKindIpv4
}

func WasiSockets0_2_0_NetworkIpAddressIpv6(v WasiSockets0_2_0_NetworkIpv6Address) WasiSockets0_2_0_NetworkIpAddress{
  return WasiSockets0_2_0_NetworkIpAddress{kind: WasiSockets0_2_0_NetworkIpAddressKindIpv6, val: v}
}

func (n WasiSockets0_2_0_NetworkIpAddress) GetIpv6() WasiSockets0_2_0_NetworkIpv6Address{
  if g, w := n.Kind(), WasiSockets0_2_0_NetworkIpAddressKindIpv6; g != w {
    panic(fmt.Sprintf("Attr kind is %v, not %v", g, w))
  }
  return n.val.(WasiSockets0_2_0_NetworkIpv6Address)
}

func (n *WasiSockets0_2_0_NetworkIpAddress) SetIpv6(v WasiSockets0_2_0_NetworkIpv6Address) {
  n.val = v
  n.kind = WasiSockets0_2_0_NetworkIpAddressKindIpv6
}

type WasiSockets0_2_0_NetworkIpv4SocketAddress struct {
  Port uint16
  Address WasiSockets0_2_0_NetworkIpv4Address
}

type WasiSockets0_2_0_NetworkIpv6SocketAddress struct {
  Port uint16
  FlowInfo uint32
  Address WasiSockets0_2_0_NetworkIpv6Address
  ScopeId uint32
}

type WasiSockets0_2_0_NetworkIpSocketAddressKind int

const (
WasiSockets0_2_0_NetworkIpSocketAddressKindIpv4 WasiSockets0_2_0_NetworkIpSocketAddressKind = iota
WasiSockets0_2_0_NetworkIpSocketAddressKindIpv6
)

type WasiSockets0_2_0_NetworkIpSocketAddress struct {
  kind WasiSockets0_2_0_NetworkIpSocketAddressKind
  val any
}

func (n WasiSockets0_2_0_NetworkIpSocketAddress) Kind() WasiSockets0_2_0_NetworkIpSocketAddressKind {
  return n.kind
}

func WasiSockets0_2_0_NetworkIpSocketAddressIpv4(v WasiSockets0_2_0_NetworkIpv4SocketAddress) WasiSockets0_2_0_NetworkIpSocketAddress{
  return WasiSockets0_2_0_NetworkIpSocketAddress{kind: WasiSockets0_2_0_NetworkIpSocketAddressKindIpv4, val: v}
}

func (n WasiSockets0_2_0_NetworkIpSocketAddress) GetIpv4() WasiSockets0_2_0_NetworkIpv4SocketAddress{
  if g, w := n.Kind(), WasiSockets0_2_0_NetworkIpSocketAddressKindIpv4; g != w {
    panic(fmt.Sprintf("Attr kind is %v, not %v", g, w))
  }
  return n.val.(WasiSockets0_2_0_NetworkIpv4SocketAddress)
}

func (n *WasiSockets0_2_0_NetworkIpSocketAddress) SetIpv4(v WasiSockets0_2_0_NetworkIpv4SocketAddress) {
  n.val = v
  n.kind = WasiSockets0_2_0_NetworkIpSocketAddressKindIpv4
}

func WasiSockets0_2_0_NetworkIpSocketAddressIpv6(v WasiSockets0_2_0_NetworkIpv6SocketAddress) WasiSockets0_2_0_NetworkIpSocketAddress{
  return WasiSockets0_2_0_NetworkIpSocketAddress{kind: WasiSockets0_2_0_NetworkIpSocketAddressKindIpv6, val: v}
}

func (n WasiSockets0_2_0_NetworkIpSocketAddress) GetIpv6() WasiSockets0_2_0_NetworkIpv6SocketAddress{
  if g, w := n.Kind(), WasiSockets0_2_0_NetworkIpSocketAddressKindIpv6; g != w {
    panic(fmt.Sprintf("Attr kind is %v, not %v", g, w))
  }
  return n.val.(WasiSockets0_2_0_NetworkIpv6SocketAddress)
}

func (n *WasiSockets0_2_0_NetworkIpSocketAddress) SetIpv6(v WasiSockets0_2_0_NetworkIpv6SocketAddress) {
  n.val = v
  n.kind = WasiSockets0_2_0_NetworkIpSocketAddressKindIpv6
}

// Import functions from wasi:sockets/instance-network@0.2.0
type WasiSockets0_2_0_InstanceNetworkNetwork = WasiSockets0_2_0_NetworkNetwork
func WasiSockets0_2_0_InstanceNetworkInstanceNetwork() WasiSockets0_2_0_InstanceNetworkNetwork {
  ret := C.wasi_sockets_instance_network_instance_network()
  var lift_ret WasiSockets0_2_0_InstanceNetworkNetwork
  lift_ret = WasiSockets0_2_0_InstanceNetworkNetwork(ret.__handle)

  return lift_ret
}

// Import functions from wasi:sockets/udp@0.2.0
type WasiSockets0_2_0_UdpPollable = WasiIo0_2_0_PollPollable
type WasiSockets0_2_0_UdpNetwork = WasiSockets0_2_0_NetworkNetwork
type WasiSockets0_2_0_UdpErrorCode = WasiSockets0_2_0_NetworkErrorCode
type WasiSockets0_2_0_UdpIpSocketAddress = WasiSockets0_2_0_NetworkIpSocketAddress
type WasiSockets0_2_0_UdpIpAddressFamily = WasiSockets0_2_0_NetworkIpAddressFamily
type WasiSockets0_2_0_UdpIncomingDatagram struct {
  Data []uint8
  RemoteAddress WasiSockets0_2_0_UdpIpSocketAddress
}

type WasiSockets0_2_0_UdpOutgoingDatagram struct {
  Data []uint8
  RemoteAddress Option[WasiSockets0_2_0_UdpIpSocketAddress]
}

// WasiSockets0_2_0_UdpUdpSocket is a handle to imported resource udp-socket
type WasiSockets0_2_0_UdpUdpSocket int32

//go:wasmimport wasi:sockets/udp@0.2.0 [resource-drop]udp-socket
func _WasiSockets0_2_0_UdpUdpSocket_drop(self WasiSockets0_2_0_UdpUdpSocket)

func (self WasiSockets0_2_0_UdpUdpSocket) Drop() {
  _WasiSockets0_2_0_UdpUdpSocket_drop(self)
}

// WasiSockets0_2_0_UdpIncomingDatagramStream is a handle to imported resource incoming-datagram-stream
type WasiSockets0_2_0_UdpIncomingDatagramStream int32

//go:wasmimport wasi:sockets/udp@0.2.0 [resource-drop]incoming-datagram-stream
func _WasiSockets0_2_0_UdpIncomingDatagramStream_drop(self WasiSockets0_2_0_UdpIncomingDatagramStream)

func (self WasiSockets0_2_0_UdpIncomingDatagramStream) Drop() {
  _WasiSockets0_2_0_UdpIncomingDatagramStream_drop(self)
}

// WasiSockets0_2_0_UdpOutgoingDatagramStream is a handle to imported resource outgoing-datagram-stream
type WasiSockets0_2_0_UdpOutgoingDatagramStream int32

//go:wasmimport wasi:sockets/udp@0.2.0 [resource-drop]outgoing-datagram-stream
func _WasiSockets0_2_0_UdpOutgoingDatagramStream_drop(self WasiSockets0_2_0_UdpOutgoingDatagramStream)

func (self WasiSockets0_2_0_UdpOutgoingDatagramStream) Drop() {
  _WasiSockets0_2_0_UdpOutgoingDatagramStream_drop(self)
}

type WasiSockets0_2_0_UdpTuple2IncomingDatagramStreamOutgoingDatagramStreamT struct {
  F0 WasiSockets0_2_0_UdpIncomingDatagramStream
  F1 WasiSockets0_2_0_UdpOutgoingDatagramStream
}

func (self WasiSockets0_2_0_UdpUdpSocket) StartBind(network WasiSockets0_2_0_UdpNetwork, local_address WasiSockets0_2_0_UdpIpSocketAddress) Result[struct{}, WasiSockets0_2_0_UdpErrorCode] {
  var lower_self C.wasi_sockets_udp_borrow_udp_socket_t
  lower_self.__handle = C.int32_t(self)
  var lower_network C.wasi_sockets_udp_borrow_network_t
  lower_network.__handle = C.int32_t(network)
  var lower_local_address C.wasi_sockets_network_ip_socket_address_t
  var lower_local_address_val C.wasi_sockets_network_ip_socket_address_t
  if local_address.Kind() == WasiSockets0_2_0_NetworkIpSocketAddressKindIpv4 {

    lower_local_address_val.tag = 0
    lower_local_address_val_ptr := (*C.wasi_sockets_network_ipv4_socket_address_t)(unsafe.Pointer(&lower_local_address_val.val))
    var lower_local_address_val_val C.wasi_sockets_network_ipv4_socket_address_t
    lower_local_address_val_val_port := C.uint16_t(local_address.GetIpv4().Port)
    lower_local_address_val_val.port = lower_local_address_val_val_port
    var lower_local_address_val_val_address C.wasi_sockets_network_ipv4_address_t
    lower_local_address_val_val_address_f0 := C.uint8_t(local_address.GetIpv4().Address.F0)
    lower_local_address_val_val_address.f0 = lower_local_address_val_val_address_f0
    lower_local_address_val_val_address_f1 := C.uint8_t(local_address.GetIpv4().Address.F1)
    lower_local_address_val_val_address.f1 = lower_local_address_val_val_address_f1
    lower_local_address_val_val_address_f2 := C.uint8_t(local_address.GetIpv4().Address.F2)
    lower_local_address_val_val_address.f2 = lower_local_address_val_val_address_f2
    lower_local_address_val_val_address_f3 := C.uint8_t(local_address.GetIpv4().Address.F3)
    lower_local_address_val_val_address.f3 = lower_local_address_val_val_address_f3
    lower_local_address_val_val.address = lower_local_address_val_val_address
    *lower_local_address_val_ptr = lower_local_address_val_val
  }
  if local_address.Kind() == WasiSockets0_2_0_NetworkIpSocketAddressKindIpv6 {

    lower_local_address_val.tag = 1
    lower_local_address_val_ptr := (*C.wasi_sockets_network_ipv6_socket_address_t)(unsafe.Pointer(&lower_local_address_val.val))
    var lower_local_address_val_val C.wasi_sockets_network_ipv6_socket_address_t
    lower_local_address_val_val_port := C.uint16_t(local_address.GetIpv6().Port)
    lower_local_address_val_val.port = lower_local_address_val_val_port
    lower_local_address_val_val_flow_info := C.uint32_t(local_address.GetIpv6().FlowInfo)
    lower_local_address_val_val.flow_info = lower_local_address_val_val_flow_info
    var lower_local_address_val_val_address C.wasi_sockets_network_ipv6_address_t
    lower_local_address_val_val_address_f0 := C.uint16_t(local_address.GetIpv6().Address.F0)
    lower_local_address_val_val_address.f0 = lower_local_address_val_val_address_f0
    lower_local_address_val_val_address_f1 := C.uint16_t(local_address.GetIpv6().Address.F1)
    lower_local_address_val_val_address.f1 = lower_local_address_val_val_address_f1
    lower_local_address_val_val_address_f2 := C.uint16_t(local_address.GetIpv6().Address.F2)
    lower_local_address_val_val_address.f2 = lower_local_address_val_val_address_f2
    lower_local_address_val_val_address_f3 := C.uint16_t(local_address.GetIpv6().Address.F3)
    lower_local_address_val_val_address.f3 = lower_local_address_val_val_address_f3
    lower_local_address_val_val_address_f4 := C.uint16_t(local_address.GetIpv6().Address.F4)
    lower_local_address_val_val_address.f4 = lower_local_address_val_val_address_f4
    lower_local_address_val_val_address_f5 := C.uint16_t(local_address.GetIpv6().Address.F5)
    lower_local_address_val_val_address.f5 = lower_local_address_val_val_address_f5
    lower_local_address_val_val_address_f6 := C.uint16_t(local_address.GetIpv6().Address.F6)
    lower_local_address_val_val_address.f6 = lower_local_address_val_val_address_f6
    lower_local_address_val_val_address_f7 := C.uint16_t(local_address.GetIpv6().Address.F7)
    lower_local_address_val_val_address.f7 = lower_local_address_val_val_address_f7
    lower_local_address_val_val.address = lower_local_address_val_val_address
    lower_local_address_val_val_scope_id := C.uint32_t(local_address.GetIpv6().ScopeId)
    lower_local_address_val_val.scope_id = lower_local_address_val_val_scope_id
    *lower_local_address_val_ptr = lower_local_address_val_val
  }
  lower_local_address = lower_local_address_val
  var ret C.wasi_sockets_udp_result_void_error_code_t
  C.wasi_sockets_udp_method_udp_socket_start_bind(lower_self , lower_network , &lower_local_address , &ret )
  var lift_ret Result[struct{}, WasiSockets0_2_0_UdpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_udp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_UdpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiSockets0_2_0_UdpUdpSocket) FinishBind() Result[struct{}, WasiSockets0_2_0_UdpErrorCode] {
  var lower_self C.wasi_sockets_udp_borrow_udp_socket_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_sockets_udp_result_void_error_code_t
  C.wasi_sockets_udp_method_udp_socket_finish_bind(lower_self , &ret )
  var lift_ret Result[struct{}, WasiSockets0_2_0_UdpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_udp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_UdpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiSockets0_2_0_UdpUdpSocket) Stream(remote_address Option[WasiSockets0_2_0_UdpIpSocketAddress]) Result[WasiSockets0_2_0_UdpTuple2IncomingDatagramStreamOutgoingDatagramStreamT, WasiSockets0_2_0_UdpErrorCode] {
  var lower_self C.wasi_sockets_udp_borrow_udp_socket_t
  lower_self.__handle = C.int32_t(self)
  var lower_remote_address C.wasi_sockets_udp_option_ip_socket_address_t
  if remote_address.IsSome() {
    var lower_remote_address_val C.wasi_sockets_network_ip_socket_address_t
    var lower_remote_address_val_val C.wasi_sockets_network_ip_socket_address_t
    if remote_address.Unwrap().Kind() == WasiSockets0_2_0_NetworkIpSocketAddressKindIpv4 {

      lower_remote_address_val_val.tag = 0
      lower_remote_address_val_val_ptr := (*C.wasi_sockets_network_ipv4_socket_address_t)(unsafe.Pointer(&lower_remote_address_val_val.val))
      var lower_remote_address_val_val_val C.wasi_sockets_network_ipv4_socket_address_t
      lower_remote_address_val_val_val_port := C.uint16_t(remote_address.Unwrap().GetIpv4().Port)
      lower_remote_address_val_val_val.port = lower_remote_address_val_val_val_port
      var lower_remote_address_val_val_val_address C.wasi_sockets_network_ipv4_address_t
      lower_remote_address_val_val_val_address_f0 := C.uint8_t(remote_address.Unwrap().GetIpv4().Address.F0)
      lower_remote_address_val_val_val_address.f0 = lower_remote_address_val_val_val_address_f0
      lower_remote_address_val_val_val_address_f1 := C.uint8_t(remote_address.Unwrap().GetIpv4().Address.F1)
      lower_remote_address_val_val_val_address.f1 = lower_remote_address_val_val_val_address_f1
      lower_remote_address_val_val_val_address_f2 := C.uint8_t(remote_address.Unwrap().GetIpv4().Address.F2)
      lower_remote_address_val_val_val_address.f2 = lower_remote_address_val_val_val_address_f2
      lower_remote_address_val_val_val_address_f3 := C.uint8_t(remote_address.Unwrap().GetIpv4().Address.F3)
      lower_remote_address_val_val_val_address.f3 = lower_remote_address_val_val_val_address_f3
      lower_remote_address_val_val_val.address = lower_remote_address_val_val_val_address
      *lower_remote_address_val_val_ptr = lower_remote_address_val_val_val
    }
    if remote_address.Unwrap().Kind() == WasiSockets0_2_0_NetworkIpSocketAddressKindIpv6 {

      lower_remote_address_val_val.tag = 1
      lower_remote_address_val_val_ptr := (*C.wasi_sockets_network_ipv6_socket_address_t)(unsafe.Pointer(&lower_remote_address_val_val.val))
      var lower_remote_address_val_val_val C.wasi_sockets_network_ipv6_socket_address_t
      lower_remote_address_val_val_val_port := C.uint16_t(remote_address.Unwrap().GetIpv6().Port)
      lower_remote_address_val_val_val.port = lower_remote_address_val_val_val_port
      lower_remote_address_val_val_val_flow_info := C.uint32_t(remote_address.Unwrap().GetIpv6().FlowInfo)
      lower_remote_address_val_val_val.flow_info = lower_remote_address_val_val_val_flow_info
      var lower_remote_address_val_val_val_address C.wasi_sockets_network_ipv6_address_t
      lower_remote_address_val_val_val_address_f0 := C.uint16_t(remote_address.Unwrap().GetIpv6().Address.F0)
      lower_remote_address_val_val_val_address.f0 = lower_remote_address_val_val_val_address_f0
      lower_remote_address_val_val_val_address_f1 := C.uint16_t(remote_address.Unwrap().GetIpv6().Address.F1)
      lower_remote_address_val_val_val_address.f1 = lower_remote_address_val_val_val_address_f1
      lower_remote_address_val_val_val_address_f2 := C.uint16_t(remote_address.Unwrap().GetIpv6().Address.F2)
      lower_remote_address_val_val_val_address.f2 = lower_remote_address_val_val_val_address_f2
      lower_remote_address_val_val_val_address_f3 := C.uint16_t(remote_address.Unwrap().GetIpv6().Address.F3)
      lower_remote_address_val_val_val_address.f3 = lower_remote_address_val_val_val_address_f3
      lower_remote_address_val_val_val_address_f4 := C.uint16_t(remote_address.Unwrap().GetIpv6().Address.F4)
      lower_remote_address_val_val_val_address.f4 = lower_remote_address_val_val_val_address_f4
      lower_remote_address_val_val_val_address_f5 := C.uint16_t(remote_address.Unwrap().GetIpv6().Address.F5)
      lower_remote_address_val_val_val_address.f5 = lower_remote_address_val_val_val_address_f5
      lower_remote_address_val_val_val_address_f6 := C.uint16_t(remote_address.Unwrap().GetIpv6().Address.F6)
      lower_remote_address_val_val_val_address.f6 = lower_remote_address_val_val_val_address_f6
      lower_remote_address_val_val_val_address_f7 := C.uint16_t(remote_address.Unwrap().GetIpv6().Address.F7)
      lower_remote_address_val_val_val_address.f7 = lower_remote_address_val_val_val_address_f7
      lower_remote_address_val_val_val.address = lower_remote_address_val_val_val_address
      lower_remote_address_val_val_val_scope_id := C.uint32_t(remote_address.Unwrap().GetIpv6().ScopeId)
      lower_remote_address_val_val_val.scope_id = lower_remote_address_val_val_val_scope_id
      *lower_remote_address_val_val_ptr = lower_remote_address_val_val_val
    }
    lower_remote_address_val = lower_remote_address_val_val
    lower_remote_address.val = lower_remote_address_val
    lower_remote_address.is_some = true
  }
  var ret C.wasi_sockets_udp_result_tuple2_own_incoming_datagram_stream_own_outgoing_datagram_stream_error_code_t
  C.wasi_sockets_udp_method_udp_socket_stream(lower_self , &lower_remote_address , &ret )
  var lift_ret Result[WasiSockets0_2_0_UdpTuple2IncomingDatagramStreamOutgoingDatagramStreamT, WasiSockets0_2_0_UdpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_udp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_UdpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_sockets_udp_tuple2_own_incoming_datagram_stream_own_outgoing_datagram_stream_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_UdpTuple2IncomingDatagramStreamOutgoingDatagramStreamT
    var lift_ret_val_F0 WasiSockets0_2_0_UdpIncomingDatagramStream
    lift_ret_val_F0 = WasiSockets0_2_0_UdpIncomingDatagramStream(lift_ret_ptr.f0.__handle)
    
    lift_ret_val.F0 = lift_ret_val_F0
    var lift_ret_val_F1 WasiSockets0_2_0_UdpOutgoingDatagramStream
    lift_ret_val_F1 = WasiSockets0_2_0_UdpOutgoingDatagramStream(lift_ret_ptr.f1.__handle)
    
    lift_ret_val.F1 = lift_ret_val_F1
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiSockets0_2_0_UdpUdpSocket) LocalAddress() Result[WasiSockets0_2_0_UdpIpSocketAddress, WasiSockets0_2_0_UdpErrorCode] {
  var lower_self C.wasi_sockets_udp_borrow_udp_socket_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_sockets_udp_result_ip_socket_address_error_code_t
  C.wasi_sockets_udp_method_udp_socket_local_address(lower_self , &ret )
  var lift_ret Result[WasiSockets0_2_0_UdpIpSocketAddress, WasiSockets0_2_0_UdpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_udp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_UdpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_sockets_udp_ip_socket_address_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_UdpIpSocketAddress
    var lift_ret_val_val WasiSockets0_2_0_NetworkIpSocketAddress
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_val_ptr := *(*C.wasi_sockets_network_ipv4_socket_address_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val_val WasiSockets0_2_0_NetworkIpv4SocketAddress
      var lift_ret_val_val_val_Port uint16
      lift_ret_val_val_val_Port = uint16(lift_ret_val_val_ptr.port)
      lift_ret_val_val_val.Port = lift_ret_val_val_val_Port
      var lift_ret_val_val_val_Address WasiSockets0_2_0_NetworkIpv4Address
      var lift_ret_val_val_val_Address_F0 uint8
      lift_ret_val_val_val_Address_F0 = uint8(lift_ret_val_val_ptr.address.f0)
      lift_ret_val_val_val_Address.F0 = lift_ret_val_val_val_Address_F0
      var lift_ret_val_val_val_Address_F1 uint8
      lift_ret_val_val_val_Address_F1 = uint8(lift_ret_val_val_ptr.address.f1)
      lift_ret_val_val_val_Address.F1 = lift_ret_val_val_val_Address_F1
      var lift_ret_val_val_val_Address_F2 uint8
      lift_ret_val_val_val_Address_F2 = uint8(lift_ret_val_val_ptr.address.f2)
      lift_ret_val_val_val_Address.F2 = lift_ret_val_val_val_Address_F2
      var lift_ret_val_val_val_Address_F3 uint8
      lift_ret_val_val_val_Address_F3 = uint8(lift_ret_val_val_ptr.address.f3)
      lift_ret_val_val_val_Address.F3 = lift_ret_val_val_val_Address_F3
      lift_ret_val_val_val.Address = lift_ret_val_val_val_Address
      lift_ret_val_val = WasiSockets0_2_0_NetworkIpSocketAddressIpv4(lift_ret_val_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val_val_ptr := *(*C.wasi_sockets_network_ipv6_socket_address_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val_val WasiSockets0_2_0_NetworkIpv6SocketAddress
      var lift_ret_val_val_val_Port uint16
      lift_ret_val_val_val_Port = uint16(lift_ret_val_val_ptr.port)
      lift_ret_val_val_val.Port = lift_ret_val_val_val_Port
      var lift_ret_val_val_val_FlowInfo uint32
      lift_ret_val_val_val_FlowInfo = uint32(lift_ret_val_val_ptr.flow_info)
      lift_ret_val_val_val.FlowInfo = lift_ret_val_val_val_FlowInfo
      var lift_ret_val_val_val_Address WasiSockets0_2_0_NetworkIpv6Address
      var lift_ret_val_val_val_Address_F0 uint16
      lift_ret_val_val_val_Address_F0 = uint16(lift_ret_val_val_ptr.address.f0)
      lift_ret_val_val_val_Address.F0 = lift_ret_val_val_val_Address_F0
      var lift_ret_val_val_val_Address_F1 uint16
      lift_ret_val_val_val_Address_F1 = uint16(lift_ret_val_val_ptr.address.f1)
      lift_ret_val_val_val_Address.F1 = lift_ret_val_val_val_Address_F1
      var lift_ret_val_val_val_Address_F2 uint16
      lift_ret_val_val_val_Address_F2 = uint16(lift_ret_val_val_ptr.address.f2)
      lift_ret_val_val_val_Address.F2 = lift_ret_val_val_val_Address_F2
      var lift_ret_val_val_val_Address_F3 uint16
      lift_ret_val_val_val_Address_F3 = uint16(lift_ret_val_val_ptr.address.f3)
      lift_ret_val_val_val_Address.F3 = lift_ret_val_val_val_Address_F3
      var lift_ret_val_val_val_Address_F4 uint16
      lift_ret_val_val_val_Address_F4 = uint16(lift_ret_val_val_ptr.address.f4)
      lift_ret_val_val_val_Address.F4 = lift_ret_val_val_val_Address_F4
      var lift_ret_val_val_val_Address_F5 uint16
      lift_ret_val_val_val_Address_F5 = uint16(lift_ret_val_val_ptr.address.f5)
      lift_ret_val_val_val_Address.F5 = lift_ret_val_val_val_Address_F5
      var lift_ret_val_val_val_Address_F6 uint16
      lift_ret_val_val_val_Address_F6 = uint16(lift_ret_val_val_ptr.address.f6)
      lift_ret_val_val_val_Address.F6 = lift_ret_val_val_val_Address_F6
      var lift_ret_val_val_val_Address_F7 uint16
      lift_ret_val_val_val_Address_F7 = uint16(lift_ret_val_val_ptr.address.f7)
      lift_ret_val_val_val_Address.F7 = lift_ret_val_val_val_Address_F7
      lift_ret_val_val_val.Address = lift_ret_val_val_val_Address
      var lift_ret_val_val_val_ScopeId uint32
      lift_ret_val_val_val_ScopeId = uint32(lift_ret_val_val_ptr.scope_id)
      lift_ret_val_val_val.ScopeId = lift_ret_val_val_val_ScopeId
      lift_ret_val_val = WasiSockets0_2_0_NetworkIpSocketAddressIpv6(lift_ret_val_val_val)
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiSockets0_2_0_UdpUdpSocket) RemoteAddress() Result[WasiSockets0_2_0_UdpIpSocketAddress, WasiSockets0_2_0_UdpErrorCode] {
  var lower_self C.wasi_sockets_udp_borrow_udp_socket_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_sockets_udp_result_ip_socket_address_error_code_t
  C.wasi_sockets_udp_method_udp_socket_remote_address(lower_self , &ret )
  var lift_ret Result[WasiSockets0_2_0_UdpIpSocketAddress, WasiSockets0_2_0_UdpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_udp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_UdpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_sockets_udp_ip_socket_address_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_UdpIpSocketAddress
    var lift_ret_val_val WasiSockets0_2_0_NetworkIpSocketAddress
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_val_ptr := *(*C.wasi_sockets_network_ipv4_socket_address_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val_val WasiSockets0_2_0_NetworkIpv4SocketAddress
      var lift_ret_val_val_val_Port uint16
      lift_ret_val_val_val_Port = uint16(lift_ret_val_val_ptr.port)
      lift_ret_val_val_val.Port = lift_ret_val_val_val_Port
      var lift_ret_val_val_val_Address WasiSockets0_2_0_NetworkIpv4Address
      var lift_ret_val_val_val_Address_F0 uint8
      lift_ret_val_val_val_Address_F0 = uint8(lift_ret_val_val_ptr.address.f0)
      lift_ret_val_val_val_Address.F0 = lift_ret_val_val_val_Address_F0
      var lift_ret_val_val_val_Address_F1 uint8
      lift_ret_val_val_val_Address_F1 = uint8(lift_ret_val_val_ptr.address.f1)
      lift_ret_val_val_val_Address.F1 = lift_ret_val_val_val_Address_F1
      var lift_ret_val_val_val_Address_F2 uint8
      lift_ret_val_val_val_Address_F2 = uint8(lift_ret_val_val_ptr.address.f2)
      lift_ret_val_val_val_Address.F2 = lift_ret_val_val_val_Address_F2
      var lift_ret_val_val_val_Address_F3 uint8
      lift_ret_val_val_val_Address_F3 = uint8(lift_ret_val_val_ptr.address.f3)
      lift_ret_val_val_val_Address.F3 = lift_ret_val_val_val_Address_F3
      lift_ret_val_val_val.Address = lift_ret_val_val_val_Address
      lift_ret_val_val = WasiSockets0_2_0_NetworkIpSocketAddressIpv4(lift_ret_val_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val_val_ptr := *(*C.wasi_sockets_network_ipv6_socket_address_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val_val WasiSockets0_2_0_NetworkIpv6SocketAddress
      var lift_ret_val_val_val_Port uint16
      lift_ret_val_val_val_Port = uint16(lift_ret_val_val_ptr.port)
      lift_ret_val_val_val.Port = lift_ret_val_val_val_Port
      var lift_ret_val_val_val_FlowInfo uint32
      lift_ret_val_val_val_FlowInfo = uint32(lift_ret_val_val_ptr.flow_info)
      lift_ret_val_val_val.FlowInfo = lift_ret_val_val_val_FlowInfo
      var lift_ret_val_val_val_Address WasiSockets0_2_0_NetworkIpv6Address
      var lift_ret_val_val_val_Address_F0 uint16
      lift_ret_val_val_val_Address_F0 = uint16(lift_ret_val_val_ptr.address.f0)
      lift_ret_val_val_val_Address.F0 = lift_ret_val_val_val_Address_F0
      var lift_ret_val_val_val_Address_F1 uint16
      lift_ret_val_val_val_Address_F1 = uint16(lift_ret_val_val_ptr.address.f1)
      lift_ret_val_val_val_Address.F1 = lift_ret_val_val_val_Address_F1
      var lift_ret_val_val_val_Address_F2 uint16
      lift_ret_val_val_val_Address_F2 = uint16(lift_ret_val_val_ptr.address.f2)
      lift_ret_val_val_val_Address.F2 = lift_ret_val_val_val_Address_F2
      var lift_ret_val_val_val_Address_F3 uint16
      lift_ret_val_val_val_Address_F3 = uint16(lift_ret_val_val_ptr.address.f3)
      lift_ret_val_val_val_Address.F3 = lift_ret_val_val_val_Address_F3
      var lift_ret_val_val_val_Address_F4 uint16
      lift_ret_val_val_val_Address_F4 = uint16(lift_ret_val_val_ptr.address.f4)
      lift_ret_val_val_val_Address.F4 = lift_ret_val_val_val_Address_F4
      var lift_ret_val_val_val_Address_F5 uint16
      lift_ret_val_val_val_Address_F5 = uint16(lift_ret_val_val_ptr.address.f5)
      lift_ret_val_val_val_Address.F5 = lift_ret_val_val_val_Address_F5
      var lift_ret_val_val_val_Address_F6 uint16
      lift_ret_val_val_val_Address_F6 = uint16(lift_ret_val_val_ptr.address.f6)
      lift_ret_val_val_val_Address.F6 = lift_ret_val_val_val_Address_F6
      var lift_ret_val_val_val_Address_F7 uint16
      lift_ret_val_val_val_Address_F7 = uint16(lift_ret_val_val_ptr.address.f7)
      lift_ret_val_val_val_Address.F7 = lift_ret_val_val_val_Address_F7
      lift_ret_val_val_val.Address = lift_ret_val_val_val_Address
      var lift_ret_val_val_val_ScopeId uint32
      lift_ret_val_val_val_ScopeId = uint32(lift_ret_val_val_ptr.scope_id)
      lift_ret_val_val_val.ScopeId = lift_ret_val_val_val_ScopeId
      lift_ret_val_val = WasiSockets0_2_0_NetworkIpSocketAddressIpv6(lift_ret_val_val_val)
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiSockets0_2_0_UdpUdpSocket) AddressFamily() WasiSockets0_2_0_UdpIpAddressFamily {
  var lower_self C.wasi_sockets_udp_borrow_udp_socket_t
  lower_self.__handle = C.int32_t(self)
  ret := C.wasi_sockets_udp_method_udp_socket_address_family(lower_self )
  var lift_ret WasiSockets0_2_0_UdpIpAddressFamily
  var lift_ret_val WasiSockets0_2_0_NetworkIpAddressFamily
  if ret == 0 {
    lift_ret_val = WasiSockets0_2_0_NetworkIpAddressFamilyIpv4()
  }
  if ret == 1 {
    lift_ret_val = WasiSockets0_2_0_NetworkIpAddressFamilyIpv6()
  }
  lift_ret = lift_ret_val
  return lift_ret
}

func (self WasiSockets0_2_0_UdpUdpSocket) UnicastHopLimit() Result[uint8, WasiSockets0_2_0_UdpErrorCode] {
  var lower_self C.wasi_sockets_udp_borrow_udp_socket_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_sockets_udp_result_u8_error_code_t
  C.wasi_sockets_udp_method_udp_socket_unicast_hop_limit(lower_self , &ret )
  var lift_ret Result[uint8, WasiSockets0_2_0_UdpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_udp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_UdpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.uint8_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint8
    lift_ret_val = uint8(lift_ret_ptr)
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiSockets0_2_0_UdpUdpSocket) SetUnicastHopLimit(value uint8) Result[struct{}, WasiSockets0_2_0_UdpErrorCode] {
  var lower_self C.wasi_sockets_udp_borrow_udp_socket_t
  lower_self.__handle = C.int32_t(self)
  lower_value := C.uint8_t(value)
  var ret C.wasi_sockets_udp_result_void_error_code_t
  C.wasi_sockets_udp_method_udp_socket_set_unicast_hop_limit(lower_self , lower_value , &ret )
  var lift_ret Result[struct{}, WasiSockets0_2_0_UdpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_udp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_UdpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiSockets0_2_0_UdpUdpSocket) ReceiveBufferSize() Result[uint64, WasiSockets0_2_0_UdpErrorCode] {
  var lower_self C.wasi_sockets_udp_borrow_udp_socket_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_sockets_udp_result_u64_error_code_t
  C.wasi_sockets_udp_method_udp_socket_receive_buffer_size(lower_self , &ret )
  var lift_ret Result[uint64, WasiSockets0_2_0_UdpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_udp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_UdpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.uint64_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint64
    lift_ret_val = uint64(lift_ret_ptr)
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiSockets0_2_0_UdpUdpSocket) SetReceiveBufferSize(value uint64) Result[struct{}, WasiSockets0_2_0_UdpErrorCode] {
  var lower_self C.wasi_sockets_udp_borrow_udp_socket_t
  lower_self.__handle = C.int32_t(self)
  lower_value := C.uint64_t(value)
  var ret C.wasi_sockets_udp_result_void_error_code_t
  C.wasi_sockets_udp_method_udp_socket_set_receive_buffer_size(lower_self , lower_value , &ret )
  var lift_ret Result[struct{}, WasiSockets0_2_0_UdpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_udp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_UdpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiSockets0_2_0_UdpUdpSocket) SendBufferSize() Result[uint64, WasiSockets0_2_0_UdpErrorCode] {
  var lower_self C.wasi_sockets_udp_borrow_udp_socket_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_sockets_udp_result_u64_error_code_t
  C.wasi_sockets_udp_method_udp_socket_send_buffer_size(lower_self , &ret )
  var lift_ret Result[uint64, WasiSockets0_2_0_UdpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_udp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_UdpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.uint64_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint64
    lift_ret_val = uint64(lift_ret_ptr)
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiSockets0_2_0_UdpUdpSocket) SetSendBufferSize(value uint64) Result[struct{}, WasiSockets0_2_0_UdpErrorCode] {
  var lower_self C.wasi_sockets_udp_borrow_udp_socket_t
  lower_self.__handle = C.int32_t(self)
  lower_value := C.uint64_t(value)
  var ret C.wasi_sockets_udp_result_void_error_code_t
  C.wasi_sockets_udp_method_udp_socket_set_send_buffer_size(lower_self , lower_value , &ret )
  var lift_ret Result[struct{}, WasiSockets0_2_0_UdpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_udp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_UdpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiSockets0_2_0_UdpUdpSocket) Subscribe() WasiSockets0_2_0_UdpPollable {
  var lower_self C.wasi_sockets_udp_borrow_udp_socket_t
  lower_self.__handle = C.int32_t(self)
  ret := C.wasi_sockets_udp_method_udp_socket_subscribe(lower_self )
  var lift_ret WasiSockets0_2_0_UdpPollable
  lift_ret = WasiSockets0_2_0_UdpPollable(ret.__handle)

  return lift_ret
}

func (self WasiSockets0_2_0_UdpIncomingDatagramStream) Receive(max_results uint64) Result[[]WasiSockets0_2_0_UdpIncomingDatagram, WasiSockets0_2_0_UdpErrorCode] {
  var lower_self C.wasi_sockets_udp_borrow_incoming_datagram_stream_t
  lower_self.__handle = C.int32_t(self)
  lower_max_results := C.uint64_t(max_results)
  var ret C.wasi_sockets_udp_result_list_incoming_datagram_error_code_t
  C.wasi_sockets_udp_method_incoming_datagram_stream_receive(lower_self , lower_max_results , &ret )
  var lift_ret Result[[]WasiSockets0_2_0_UdpIncomingDatagram, WasiSockets0_2_0_UdpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_udp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_UdpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_sockets_udp_list_incoming_datagram_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val []WasiSockets0_2_0_UdpIncomingDatagram
    lift_ret_val = make([]WasiSockets0_2_0_UdpIncomingDatagram, lift_ret_ptr.len)
    if lift_ret_ptr.len > 0 {
      for lift_ret_val_i := 0; lift_ret_val_i < int(lift_ret_ptr.len); lift_ret_val_i++ {
        var empty_lift_ret_val C.wasi_sockets_udp_incoming_datagram_t
        lift_ret_val_ptr := *(*C.wasi_sockets_udp_incoming_datagram_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lift_ret_ptr.ptr)) +
        uintptr(lift_ret_val_i)*unsafe.Sizeof(empty_lift_ret_val)))
        var list_lift_ret_val WasiSockets0_2_0_UdpIncomingDatagram
        var list_lift_ret_val_Data []uint8
        list_lift_ret_val_Data = make([]uint8, lift_ret_val_ptr.data.len)
        if lift_ret_val_ptr.data.len > 0 {
          for list_lift_ret_val_Data_i := 0; list_lift_ret_val_Data_i < int(lift_ret_val_ptr.data.len); list_lift_ret_val_Data_i++ {
            var empty_list_lift_ret_val_Data C.uint8_t
            list_lift_ret_val_Data_ptr := *(*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lift_ret_val_ptr.data.ptr)) +
            uintptr(list_lift_ret_val_Data_i)*unsafe.Sizeof(empty_list_lift_ret_val_Data)))
            var list_list_lift_ret_val_Data uint8
            list_list_lift_ret_val_Data = uint8(list_lift_ret_val_Data_ptr)
            list_lift_ret_val_Data[list_lift_ret_val_Data_i] = list_list_lift_ret_val_Data
          }
        }
        list_lift_ret_val.Data = list_lift_ret_val_Data
        var list_lift_ret_val_RemoteAddress WasiSockets0_2_0_UdpIpSocketAddress
        var list_lift_ret_val_RemoteAddress_val WasiSockets0_2_0_NetworkIpSocketAddress
        if lift_ret_val_ptr.remote_address.tag == 0 {
          list_lift_ret_val_RemoteAddress_val_ptr := *(*C.wasi_sockets_network_ipv4_socket_address_t)(unsafe.Pointer(&lift_ret_val_ptr.remote_address.val))
          var list_lift_ret_val_RemoteAddress_val_val WasiSockets0_2_0_NetworkIpv4SocketAddress
          var list_lift_ret_val_RemoteAddress_val_val_Port uint16
          list_lift_ret_val_RemoteAddress_val_val_Port = uint16(list_lift_ret_val_RemoteAddress_val_ptr.port)
          list_lift_ret_val_RemoteAddress_val_val.Port = list_lift_ret_val_RemoteAddress_val_val_Port
          var list_lift_ret_val_RemoteAddress_val_val_Address WasiSockets0_2_0_NetworkIpv4Address
          var list_lift_ret_val_RemoteAddress_val_val_Address_F0 uint8
          list_lift_ret_val_RemoteAddress_val_val_Address_F0 = uint8(list_lift_ret_val_RemoteAddress_val_ptr.address.f0)
          list_lift_ret_val_RemoteAddress_val_val_Address.F0 = list_lift_ret_val_RemoteAddress_val_val_Address_F0
          var list_lift_ret_val_RemoteAddress_val_val_Address_F1 uint8
          list_lift_ret_val_RemoteAddress_val_val_Address_F1 = uint8(list_lift_ret_val_RemoteAddress_val_ptr.address.f1)
          list_lift_ret_val_RemoteAddress_val_val_Address.F1 = list_lift_ret_val_RemoteAddress_val_val_Address_F1
          var list_lift_ret_val_RemoteAddress_val_val_Address_F2 uint8
          list_lift_ret_val_RemoteAddress_val_val_Address_F2 = uint8(list_lift_ret_val_RemoteAddress_val_ptr.address.f2)
          list_lift_ret_val_RemoteAddress_val_val_Address.F2 = list_lift_ret_val_RemoteAddress_val_val_Address_F2
          var list_lift_ret_val_RemoteAddress_val_val_Address_F3 uint8
          list_lift_ret_val_RemoteAddress_val_val_Address_F3 = uint8(list_lift_ret_val_RemoteAddress_val_ptr.address.f3)
          list_lift_ret_val_RemoteAddress_val_val_Address.F3 = list_lift_ret_val_RemoteAddress_val_val_Address_F3
          list_lift_ret_val_RemoteAddress_val_val.Address = list_lift_ret_val_RemoteAddress_val_val_Address
          list_lift_ret_val_RemoteAddress_val = WasiSockets0_2_0_NetworkIpSocketAddressIpv4(list_lift_ret_val_RemoteAddress_val_val)
        }
        if lift_ret_val_ptr.remote_address.tag == 1 {
          list_lift_ret_val_RemoteAddress_val_ptr := *(*C.wasi_sockets_network_ipv6_socket_address_t)(unsafe.Pointer(&lift_ret_val_ptr.remote_address.val))
          var list_lift_ret_val_RemoteAddress_val_val WasiSockets0_2_0_NetworkIpv6SocketAddress
          var list_lift_ret_val_RemoteAddress_val_val_Port uint16
          list_lift_ret_val_RemoteAddress_val_val_Port = uint16(list_lift_ret_val_RemoteAddress_val_ptr.port)
          list_lift_ret_val_RemoteAddress_val_val.Port = list_lift_ret_val_RemoteAddress_val_val_Port
          var list_lift_ret_val_RemoteAddress_val_val_FlowInfo uint32
          list_lift_ret_val_RemoteAddress_val_val_FlowInfo = uint32(list_lift_ret_val_RemoteAddress_val_ptr.flow_info)
          list_lift_ret_val_RemoteAddress_val_val.FlowInfo = list_lift_ret_val_RemoteAddress_val_val_FlowInfo
          var list_lift_ret_val_RemoteAddress_val_val_Address WasiSockets0_2_0_NetworkIpv6Address
          var list_lift_ret_val_RemoteAddress_val_val_Address_F0 uint16
          list_lift_ret_val_RemoteAddress_val_val_Address_F0 = uint16(list_lift_ret_val_RemoteAddress_val_ptr.address.f0)
          list_lift_ret_val_RemoteAddress_val_val_Address.F0 = list_lift_ret_val_RemoteAddress_val_val_Address_F0
          var list_lift_ret_val_RemoteAddress_val_val_Address_F1 uint16
          list_lift_ret_val_RemoteAddress_val_val_Address_F1 = uint16(list_lift_ret_val_RemoteAddress_val_ptr.address.f1)
          list_lift_ret_val_RemoteAddress_val_val_Address.F1 = list_lift_ret_val_RemoteAddress_val_val_Address_F1
          var list_lift_ret_val_RemoteAddress_val_val_Address_F2 uint16
          list_lift_ret_val_RemoteAddress_val_val_Address_F2 = uint16(list_lift_ret_val_RemoteAddress_val_ptr.address.f2)
          list_lift_ret_val_RemoteAddress_val_val_Address.F2 = list_lift_ret_val_RemoteAddress_val_val_Address_F2
          var list_lift_ret_val_RemoteAddress_val_val_Address_F3 uint16
          list_lift_ret_val_RemoteAddress_val_val_Address_F3 = uint16(list_lift_ret_val_RemoteAddress_val_ptr.address.f3)
          list_lift_ret_val_RemoteAddress_val_val_Address.F3 = list_lift_ret_val_RemoteAddress_val_val_Address_F3
          var list_lift_ret_val_RemoteAddress_val_val_Address_F4 uint16
          list_lift_ret_val_RemoteAddress_val_val_Address_F4 = uint16(list_lift_ret_val_RemoteAddress_val_ptr.address.f4)
          list_lift_ret_val_RemoteAddress_val_val_Address.F4 = list_lift_ret_val_RemoteAddress_val_val_Address_F4
          var list_lift_ret_val_RemoteAddress_val_val_Address_F5 uint16
          list_lift_ret_val_RemoteAddress_val_val_Address_F5 = uint16(list_lift_ret_val_RemoteAddress_val_ptr.address.f5)
          list_lift_ret_val_RemoteAddress_val_val_Address.F5 = list_lift_ret_val_RemoteAddress_val_val_Address_F5
          var list_lift_ret_val_RemoteAddress_val_val_Address_F6 uint16
          list_lift_ret_val_RemoteAddress_val_val_Address_F6 = uint16(list_lift_ret_val_RemoteAddress_val_ptr.address.f6)
          list_lift_ret_val_RemoteAddress_val_val_Address.F6 = list_lift_ret_val_RemoteAddress_val_val_Address_F6
          var list_lift_ret_val_RemoteAddress_val_val_Address_F7 uint16
          list_lift_ret_val_RemoteAddress_val_val_Address_F7 = uint16(list_lift_ret_val_RemoteAddress_val_ptr.address.f7)
          list_lift_ret_val_RemoteAddress_val_val_Address.F7 = list_lift_ret_val_RemoteAddress_val_val_Address_F7
          list_lift_ret_val_RemoteAddress_val_val.Address = list_lift_ret_val_RemoteAddress_val_val_Address
          var list_lift_ret_val_RemoteAddress_val_val_ScopeId uint32
          list_lift_ret_val_RemoteAddress_val_val_ScopeId = uint32(list_lift_ret_val_RemoteAddress_val_ptr.scope_id)
          list_lift_ret_val_RemoteAddress_val_val.ScopeId = list_lift_ret_val_RemoteAddress_val_val_ScopeId
          list_lift_ret_val_RemoteAddress_val = WasiSockets0_2_0_NetworkIpSocketAddressIpv6(list_lift_ret_val_RemoteAddress_val_val)
        }
        list_lift_ret_val_RemoteAddress = list_lift_ret_val_RemoteAddress_val
        list_lift_ret_val.RemoteAddress = list_lift_ret_val_RemoteAddress
        lift_ret_val[lift_ret_val_i] = list_lift_ret_val
      }
    }
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiSockets0_2_0_UdpIncomingDatagramStream) Subscribe() WasiSockets0_2_0_UdpPollable {
  var lower_self C.wasi_sockets_udp_borrow_incoming_datagram_stream_t
  lower_self.__handle = C.int32_t(self)
  ret := C.wasi_sockets_udp_method_incoming_datagram_stream_subscribe(lower_self )
  var lift_ret WasiSockets0_2_0_UdpPollable
  lift_ret = WasiSockets0_2_0_UdpPollable(ret.__handle)

  return lift_ret
}

func (self WasiSockets0_2_0_UdpOutgoingDatagramStream) CheckSend() Result[uint64, WasiSockets0_2_0_UdpErrorCode] {
  var lower_self C.wasi_sockets_udp_borrow_outgoing_datagram_stream_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_sockets_udp_result_u64_error_code_t
  C.wasi_sockets_udp_method_outgoing_datagram_stream_check_send(lower_self , &ret )
  var lift_ret Result[uint64, WasiSockets0_2_0_UdpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_udp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_UdpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.uint64_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint64
    lift_ret_val = uint64(lift_ret_ptr)
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiSockets0_2_0_UdpOutgoingDatagramStream) Send(datagrams []WasiSockets0_2_0_UdpOutgoingDatagram) Result[uint64, WasiSockets0_2_0_UdpErrorCode] {
  var lower_self C.wasi_sockets_udp_borrow_outgoing_datagram_stream_t
  lower_self.__handle = C.int32_t(self)
  var lower_datagrams C.wasi_sockets_udp_list_outgoing_datagram_t
  if len(datagrams) == 0 {
    lower_datagrams.ptr = nil
    lower_datagrams.len = 0
  } else {
    var empty_lower_datagrams C.wasi_sockets_udp_outgoing_datagram_t
    lower_datagrams.ptr = (*C.wasi_sockets_udp_outgoing_datagram_t)(C.malloc(C.size_t(len(datagrams)) * C.size_t(unsafe.Sizeof(empty_lower_datagrams))))
    lower_datagrams.len = C.size_t(len(datagrams))
    for lower_datagrams_i := range datagrams {
      lower_datagrams_ptr := (*C.wasi_sockets_udp_outgoing_datagram_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_datagrams.ptr)) +
      uintptr(lower_datagrams_i)*unsafe.Sizeof(empty_lower_datagrams)))
      var lower_datagrams_ptr_value C.wasi_sockets_udp_outgoing_datagram_t
      var lower_datagrams_ptr_value_data C.frontend_list_u8_t
      if len(datagrams[lower_datagrams_i].Data) == 0 {
        lower_datagrams_ptr_value_data.ptr = nil
        lower_datagrams_ptr_value_data.len = 0
      } else {
        var empty_lower_datagrams_ptr_value_data C.uint8_t
        lower_datagrams_ptr_value_data.ptr = (*C.uint8_t)(C.malloc(C.size_t(len(datagrams[lower_datagrams_i].Data)) * C.size_t(unsafe.Sizeof(empty_lower_datagrams_ptr_value_data))))
        lower_datagrams_ptr_value_data.len = C.size_t(len(datagrams[lower_datagrams_i].Data))
        for lower_datagrams_ptr_value_data_i := range datagrams[lower_datagrams_i].Data {
          lower_datagrams_ptr_value_data_ptr := (*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_datagrams_ptr_value_data.ptr)) +
          uintptr(lower_datagrams_ptr_value_data_i)*unsafe.Sizeof(empty_lower_datagrams_ptr_value_data)))
          lower_datagrams_ptr_value_data_ptr_value := C.uint8_t(datagrams[lower_datagrams_i].Data[lower_datagrams_ptr_value_data_i])
          *lower_datagrams_ptr_value_data_ptr = lower_datagrams_ptr_value_data_ptr_value
        }
      }
      lower_datagrams_ptr_value.data = lower_datagrams_ptr_value_data
      var lower_datagrams_ptr_value_remote_address C.wasi_sockets_udp_option_ip_socket_address_t
      if datagrams[lower_datagrams_i].RemoteAddress.IsSome() {
        var lower_datagrams_ptr_value_remote_address_val C.wasi_sockets_network_ip_socket_address_t
        var lower_datagrams_ptr_value_remote_address_val_val C.wasi_sockets_network_ip_socket_address_t
        if datagrams[lower_datagrams_i].RemoteAddress.Unwrap().Kind() == WasiSockets0_2_0_NetworkIpSocketAddressKindIpv4 {

          lower_datagrams_ptr_value_remote_address_val_val.tag = 0
          lower_datagrams_ptr_value_remote_address_val_val_ptr := (*C.wasi_sockets_network_ipv4_socket_address_t)(unsafe.Pointer(&lower_datagrams_ptr_value_remote_address_val_val.val))
          var lower_datagrams_ptr_value_remote_address_val_val_val C.wasi_sockets_network_ipv4_socket_address_t
          lower_datagrams_ptr_value_remote_address_val_val_val_port := C.uint16_t(datagrams[lower_datagrams_i].RemoteAddress.Unwrap().GetIpv4().Port)
          lower_datagrams_ptr_value_remote_address_val_val_val.port = lower_datagrams_ptr_value_remote_address_val_val_val_port
          var lower_datagrams_ptr_value_remote_address_val_val_val_address C.wasi_sockets_network_ipv4_address_t
          lower_datagrams_ptr_value_remote_address_val_val_val_address_f0 := C.uint8_t(datagrams[lower_datagrams_i].RemoteAddress.Unwrap().GetIpv4().Address.F0)
          lower_datagrams_ptr_value_remote_address_val_val_val_address.f0 = lower_datagrams_ptr_value_remote_address_val_val_val_address_f0
          lower_datagrams_ptr_value_remote_address_val_val_val_address_f1 := C.uint8_t(datagrams[lower_datagrams_i].RemoteAddress.Unwrap().GetIpv4().Address.F1)
          lower_datagrams_ptr_value_remote_address_val_val_val_address.f1 = lower_datagrams_ptr_value_remote_address_val_val_val_address_f1
          lower_datagrams_ptr_value_remote_address_val_val_val_address_f2 := C.uint8_t(datagrams[lower_datagrams_i].RemoteAddress.Unwrap().GetIpv4().Address.F2)
          lower_datagrams_ptr_value_remote_address_val_val_val_address.f2 = lower_datagrams_ptr_value_remote_address_val_val_val_address_f2
          lower_datagrams_ptr_value_remote_address_val_val_val_address_f3 := C.uint8_t(datagrams[lower_datagrams_i].RemoteAddress.Unwrap().GetIpv4().Address.F3)
          lower_datagrams_ptr_value_remote_address_val_val_val_address.f3 = lower_datagrams_ptr_value_remote_address_val_val_val_address_f3
          lower_datagrams_ptr_value_remote_address_val_val_val.address = lower_datagrams_ptr_value_remote_address_val_val_val_address
          *lower_datagrams_ptr_value_remote_address_val_val_ptr = lower_datagrams_ptr_value_remote_address_val_val_val
        }
        if datagrams[lower_datagrams_i].RemoteAddress.Unwrap().Kind() == WasiSockets0_2_0_NetworkIpSocketAddressKindIpv6 {

          lower_datagrams_ptr_value_remote_address_val_val.tag = 1
          lower_datagrams_ptr_value_remote_address_val_val_ptr := (*C.wasi_sockets_network_ipv6_socket_address_t)(unsafe.Pointer(&lower_datagrams_ptr_value_remote_address_val_val.val))
          var lower_datagrams_ptr_value_remote_address_val_val_val C.wasi_sockets_network_ipv6_socket_address_t
          lower_datagrams_ptr_value_remote_address_val_val_val_port := C.uint16_t(datagrams[lower_datagrams_i].RemoteAddress.Unwrap().GetIpv6().Port)
          lower_datagrams_ptr_value_remote_address_val_val_val.port = lower_datagrams_ptr_value_remote_address_val_val_val_port
          lower_datagrams_ptr_value_remote_address_val_val_val_flow_info := C.uint32_t(datagrams[lower_datagrams_i].RemoteAddress.Unwrap().GetIpv6().FlowInfo)
          lower_datagrams_ptr_value_remote_address_val_val_val.flow_info = lower_datagrams_ptr_value_remote_address_val_val_val_flow_info
          var lower_datagrams_ptr_value_remote_address_val_val_val_address C.wasi_sockets_network_ipv6_address_t
          lower_datagrams_ptr_value_remote_address_val_val_val_address_f0 := C.uint16_t(datagrams[lower_datagrams_i].RemoteAddress.Unwrap().GetIpv6().Address.F0)
          lower_datagrams_ptr_value_remote_address_val_val_val_address.f0 = lower_datagrams_ptr_value_remote_address_val_val_val_address_f0
          lower_datagrams_ptr_value_remote_address_val_val_val_address_f1 := C.uint16_t(datagrams[lower_datagrams_i].RemoteAddress.Unwrap().GetIpv6().Address.F1)
          lower_datagrams_ptr_value_remote_address_val_val_val_address.f1 = lower_datagrams_ptr_value_remote_address_val_val_val_address_f1
          lower_datagrams_ptr_value_remote_address_val_val_val_address_f2 := C.uint16_t(datagrams[lower_datagrams_i].RemoteAddress.Unwrap().GetIpv6().Address.F2)
          lower_datagrams_ptr_value_remote_address_val_val_val_address.f2 = lower_datagrams_ptr_value_remote_address_val_val_val_address_f2
          lower_datagrams_ptr_value_remote_address_val_val_val_address_f3 := C.uint16_t(datagrams[lower_datagrams_i].RemoteAddress.Unwrap().GetIpv6().Address.F3)
          lower_datagrams_ptr_value_remote_address_val_val_val_address.f3 = lower_datagrams_ptr_value_remote_address_val_val_val_address_f3
          lower_datagrams_ptr_value_remote_address_val_val_val_address_f4 := C.uint16_t(datagrams[lower_datagrams_i].RemoteAddress.Unwrap().GetIpv6().Address.F4)
          lower_datagrams_ptr_value_remote_address_val_val_val_address.f4 = lower_datagrams_ptr_value_remote_address_val_val_val_address_f4
          lower_datagrams_ptr_value_remote_address_val_val_val_address_f5 := C.uint16_t(datagrams[lower_datagrams_i].RemoteAddress.Unwrap().GetIpv6().Address.F5)
          lower_datagrams_ptr_value_remote_address_val_val_val_address.f5 = lower_datagrams_ptr_value_remote_address_val_val_val_address_f5
          lower_datagrams_ptr_value_remote_address_val_val_val_address_f6 := C.uint16_t(datagrams[lower_datagrams_i].RemoteAddress.Unwrap().GetIpv6().Address.F6)
          lower_datagrams_ptr_value_remote_address_val_val_val_address.f6 = lower_datagrams_ptr_value_remote_address_val_val_val_address_f6
          lower_datagrams_ptr_value_remote_address_val_val_val_address_f7 := C.uint16_t(datagrams[lower_datagrams_i].RemoteAddress.Unwrap().GetIpv6().Address.F7)
          lower_datagrams_ptr_value_remote_address_val_val_val_address.f7 = lower_datagrams_ptr_value_remote_address_val_val_val_address_f7
          lower_datagrams_ptr_value_remote_address_val_val_val.address = lower_datagrams_ptr_value_remote_address_val_val_val_address
          lower_datagrams_ptr_value_remote_address_val_val_val_scope_id := C.uint32_t(datagrams[lower_datagrams_i].RemoteAddress.Unwrap().GetIpv6().ScopeId)
          lower_datagrams_ptr_value_remote_address_val_val_val.scope_id = lower_datagrams_ptr_value_remote_address_val_val_val_scope_id
          *lower_datagrams_ptr_value_remote_address_val_val_ptr = lower_datagrams_ptr_value_remote_address_val_val_val
        }
        lower_datagrams_ptr_value_remote_address_val = lower_datagrams_ptr_value_remote_address_val_val
        lower_datagrams_ptr_value_remote_address.val = lower_datagrams_ptr_value_remote_address_val
        lower_datagrams_ptr_value_remote_address.is_some = true
      }
      lower_datagrams_ptr_value.remote_address = lower_datagrams_ptr_value_remote_address
      *lower_datagrams_ptr = lower_datagrams_ptr_value
    }
  }
  var ret C.wasi_sockets_udp_result_u64_error_code_t
  C.wasi_sockets_udp_method_outgoing_datagram_stream_send(lower_self , &lower_datagrams , &ret )
  var lift_ret Result[uint64, WasiSockets0_2_0_UdpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_udp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_UdpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.uint64_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint64
    lift_ret_val = uint64(lift_ret_ptr)
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiSockets0_2_0_UdpOutgoingDatagramStream) Subscribe() WasiSockets0_2_0_UdpPollable {
  var lower_self C.wasi_sockets_udp_borrow_outgoing_datagram_stream_t
  lower_self.__handle = C.int32_t(self)
  ret := C.wasi_sockets_udp_method_outgoing_datagram_stream_subscribe(lower_self )
  var lift_ret WasiSockets0_2_0_UdpPollable
  lift_ret = WasiSockets0_2_0_UdpPollable(ret.__handle)

  return lift_ret
}

// Import functions from wasi:sockets/udp-create-socket@0.2.0
type WasiSockets0_2_0_UdpCreateSocketNetwork = WasiSockets0_2_0_NetworkNetwork
type WasiSockets0_2_0_UdpCreateSocketErrorCode = WasiSockets0_2_0_NetworkErrorCode
type WasiSockets0_2_0_UdpCreateSocketIpAddressFamily = WasiSockets0_2_0_NetworkIpAddressFamily
type WasiSockets0_2_0_UdpCreateSocketUdpSocket = WasiSockets0_2_0_UdpUdpSocket
func WasiSockets0_2_0_UdpCreateSocketCreateUdpSocket(address_family WasiSockets0_2_0_UdpCreateSocketIpAddressFamily) Result[WasiSockets0_2_0_UdpCreateSocketUdpSocket, WasiSockets0_2_0_UdpCreateSocketErrorCode] {
  var lower_address_family C.wasi_sockets_network_ip_address_family_t
  var lower_address_family_val C.wasi_sockets_network_ip_address_family_t
  if address_family.Kind() == WasiSockets0_2_0_NetworkIpAddressFamilyKindIpv4 {
    lower_address_family_val = 0
  }
  if address_family.Kind() == WasiSockets0_2_0_NetworkIpAddressFamilyKindIpv6 {
    lower_address_family_val = 1
  }
  lower_address_family = lower_address_family_val
  var ret C.wasi_sockets_udp_create_socket_result_own_udp_socket_error_code_t
  C.wasi_sockets_udp_create_socket_create_udp_socket(lower_address_family , &ret )
  var lift_ret Result[WasiSockets0_2_0_UdpCreateSocketUdpSocket, WasiSockets0_2_0_UdpCreateSocketErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_udp_create_socket_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_UdpCreateSocketErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_sockets_udp_create_socket_own_udp_socket_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_UdpCreateSocketUdpSocket
    lift_ret_val = WasiSockets0_2_0_UdpCreateSocketUdpSocket(lift_ret_ptr.__handle)
    
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

// Import functions from wasi:sockets/tcp@0.2.0
type WasiSockets0_2_0_TcpInputStream = WasiIo0_2_0_StreamsInputStream
type WasiSockets0_2_0_TcpOutputStream = WasiIo0_2_0_StreamsOutputStream
type WasiSockets0_2_0_TcpPollable = WasiIo0_2_0_PollPollable
type WasiSockets0_2_0_TcpDuration = WasiClocks0_2_0_MonotonicClockDuration
type WasiSockets0_2_0_TcpNetwork = WasiSockets0_2_0_NetworkNetwork
type WasiSockets0_2_0_TcpErrorCode = WasiSockets0_2_0_NetworkErrorCode
type WasiSockets0_2_0_TcpIpSocketAddress = WasiSockets0_2_0_NetworkIpSocketAddress
type WasiSockets0_2_0_TcpIpAddressFamily = WasiSockets0_2_0_NetworkIpAddressFamily
type WasiSockets0_2_0_TcpShutdownTypeKind int

const (
WasiSockets0_2_0_TcpShutdownTypeKindReceive WasiSockets0_2_0_TcpShutdownTypeKind = iota
WasiSockets0_2_0_TcpShutdownTypeKindSend
WasiSockets0_2_0_TcpShutdownTypeKindBoth
)

type WasiSockets0_2_0_TcpShutdownType struct {
  kind WasiSockets0_2_0_TcpShutdownTypeKind
}

func (n WasiSockets0_2_0_TcpShutdownType) Kind() WasiSockets0_2_0_TcpShutdownTypeKind {
  return n.kind
}

func WasiSockets0_2_0_TcpShutdownTypeReceive() WasiSockets0_2_0_TcpShutdownType{
  return WasiSockets0_2_0_TcpShutdownType{kind: WasiSockets0_2_0_TcpShutdownTypeKindReceive}
}

func WasiSockets0_2_0_TcpShutdownTypeSend() WasiSockets0_2_0_TcpShutdownType{
  return WasiSockets0_2_0_TcpShutdownType{kind: WasiSockets0_2_0_TcpShutdownTypeKindSend}
}

func WasiSockets0_2_0_TcpShutdownTypeBoth() WasiSockets0_2_0_TcpShutdownType{
  return WasiSockets0_2_0_TcpShutdownType{kind: WasiSockets0_2_0_TcpShutdownTypeKindBoth}
}

// WasiSockets0_2_0_TcpTcpSocket is a handle to imported resource tcp-socket
type WasiSockets0_2_0_TcpTcpSocket int32

//go:wasmimport wasi:sockets/tcp@0.2.0 [resource-drop]tcp-socket
func _WasiSockets0_2_0_TcpTcpSocket_drop(self WasiSockets0_2_0_TcpTcpSocket)

func (self WasiSockets0_2_0_TcpTcpSocket) Drop() {
  _WasiSockets0_2_0_TcpTcpSocket_drop(self)
}

type WasiSockets0_2_0_TcpTuple2InputStreamOutputStreamT struct {
  F0 WasiSockets0_2_0_TcpInputStream
  F1 WasiSockets0_2_0_TcpOutputStream
}

type WasiSockets0_2_0_TcpTuple3TcpSocketInputStreamOutputStreamT struct {
  F0 WasiSockets0_2_0_TcpTcpSocket
  F1 WasiSockets0_2_0_TcpInputStream
  F2 WasiSockets0_2_0_TcpOutputStream
}

func (self WasiSockets0_2_0_TcpTcpSocket) StartBind(network WasiSockets0_2_0_TcpNetwork, local_address WasiSockets0_2_0_TcpIpSocketAddress) Result[struct{}, WasiSockets0_2_0_TcpErrorCode] {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  var lower_network C.wasi_sockets_tcp_borrow_network_t
  lower_network.__handle = C.int32_t(network)
  var lower_local_address C.wasi_sockets_network_ip_socket_address_t
  var lower_local_address_val C.wasi_sockets_network_ip_socket_address_t
  if local_address.Kind() == WasiSockets0_2_0_NetworkIpSocketAddressKindIpv4 {

    lower_local_address_val.tag = 0
    lower_local_address_val_ptr := (*C.wasi_sockets_network_ipv4_socket_address_t)(unsafe.Pointer(&lower_local_address_val.val))
    var lower_local_address_val_val C.wasi_sockets_network_ipv4_socket_address_t
    lower_local_address_val_val_port := C.uint16_t(local_address.GetIpv4().Port)
    lower_local_address_val_val.port = lower_local_address_val_val_port
    var lower_local_address_val_val_address C.wasi_sockets_network_ipv4_address_t
    lower_local_address_val_val_address_f0 := C.uint8_t(local_address.GetIpv4().Address.F0)
    lower_local_address_val_val_address.f0 = lower_local_address_val_val_address_f0
    lower_local_address_val_val_address_f1 := C.uint8_t(local_address.GetIpv4().Address.F1)
    lower_local_address_val_val_address.f1 = lower_local_address_val_val_address_f1
    lower_local_address_val_val_address_f2 := C.uint8_t(local_address.GetIpv4().Address.F2)
    lower_local_address_val_val_address.f2 = lower_local_address_val_val_address_f2
    lower_local_address_val_val_address_f3 := C.uint8_t(local_address.GetIpv4().Address.F3)
    lower_local_address_val_val_address.f3 = lower_local_address_val_val_address_f3
    lower_local_address_val_val.address = lower_local_address_val_val_address
    *lower_local_address_val_ptr = lower_local_address_val_val
  }
  if local_address.Kind() == WasiSockets0_2_0_NetworkIpSocketAddressKindIpv6 {

    lower_local_address_val.tag = 1
    lower_local_address_val_ptr := (*C.wasi_sockets_network_ipv6_socket_address_t)(unsafe.Pointer(&lower_local_address_val.val))
    var lower_local_address_val_val C.wasi_sockets_network_ipv6_socket_address_t
    lower_local_address_val_val_port := C.uint16_t(local_address.GetIpv6().Port)
    lower_local_address_val_val.port = lower_local_address_val_val_port
    lower_local_address_val_val_flow_info := C.uint32_t(local_address.GetIpv6().FlowInfo)
    lower_local_address_val_val.flow_info = lower_local_address_val_val_flow_info
    var lower_local_address_val_val_address C.wasi_sockets_network_ipv6_address_t
    lower_local_address_val_val_address_f0 := C.uint16_t(local_address.GetIpv6().Address.F0)
    lower_local_address_val_val_address.f0 = lower_local_address_val_val_address_f0
    lower_local_address_val_val_address_f1 := C.uint16_t(local_address.GetIpv6().Address.F1)
    lower_local_address_val_val_address.f1 = lower_local_address_val_val_address_f1
    lower_local_address_val_val_address_f2 := C.uint16_t(local_address.GetIpv6().Address.F2)
    lower_local_address_val_val_address.f2 = lower_local_address_val_val_address_f2
    lower_local_address_val_val_address_f3 := C.uint16_t(local_address.GetIpv6().Address.F3)
    lower_local_address_val_val_address.f3 = lower_local_address_val_val_address_f3
    lower_local_address_val_val_address_f4 := C.uint16_t(local_address.GetIpv6().Address.F4)
    lower_local_address_val_val_address.f4 = lower_local_address_val_val_address_f4
    lower_local_address_val_val_address_f5 := C.uint16_t(local_address.GetIpv6().Address.F5)
    lower_local_address_val_val_address.f5 = lower_local_address_val_val_address_f5
    lower_local_address_val_val_address_f6 := C.uint16_t(local_address.GetIpv6().Address.F6)
    lower_local_address_val_val_address.f6 = lower_local_address_val_val_address_f6
    lower_local_address_val_val_address_f7 := C.uint16_t(local_address.GetIpv6().Address.F7)
    lower_local_address_val_val_address.f7 = lower_local_address_val_val_address_f7
    lower_local_address_val_val.address = lower_local_address_val_val_address
    lower_local_address_val_val_scope_id := C.uint32_t(local_address.GetIpv6().ScopeId)
    lower_local_address_val_val.scope_id = lower_local_address_val_val_scope_id
    *lower_local_address_val_ptr = lower_local_address_val_val
  }
  lower_local_address = lower_local_address_val
  var ret C.wasi_sockets_tcp_result_void_error_code_t
  C.wasi_sockets_tcp_method_tcp_socket_start_bind(lower_self , lower_network , &lower_local_address , &ret )
  var lift_ret Result[struct{}, WasiSockets0_2_0_TcpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) FinishBind() Result[struct{}, WasiSockets0_2_0_TcpErrorCode] {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_sockets_tcp_result_void_error_code_t
  C.wasi_sockets_tcp_method_tcp_socket_finish_bind(lower_self , &ret )
  var lift_ret Result[struct{}, WasiSockets0_2_0_TcpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) StartConnect(network WasiSockets0_2_0_TcpNetwork, remote_address WasiSockets0_2_0_TcpIpSocketAddress) Result[struct{}, WasiSockets0_2_0_TcpErrorCode] {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  var lower_network C.wasi_sockets_tcp_borrow_network_t
  lower_network.__handle = C.int32_t(network)
  var lower_remote_address C.wasi_sockets_network_ip_socket_address_t
  var lower_remote_address_val C.wasi_sockets_network_ip_socket_address_t
  if remote_address.Kind() == WasiSockets0_2_0_NetworkIpSocketAddressKindIpv4 {

    lower_remote_address_val.tag = 0
    lower_remote_address_val_ptr := (*C.wasi_sockets_network_ipv4_socket_address_t)(unsafe.Pointer(&lower_remote_address_val.val))
    var lower_remote_address_val_val C.wasi_sockets_network_ipv4_socket_address_t
    lower_remote_address_val_val_port := C.uint16_t(remote_address.GetIpv4().Port)
    lower_remote_address_val_val.port = lower_remote_address_val_val_port
    var lower_remote_address_val_val_address C.wasi_sockets_network_ipv4_address_t
    lower_remote_address_val_val_address_f0 := C.uint8_t(remote_address.GetIpv4().Address.F0)
    lower_remote_address_val_val_address.f0 = lower_remote_address_val_val_address_f0
    lower_remote_address_val_val_address_f1 := C.uint8_t(remote_address.GetIpv4().Address.F1)
    lower_remote_address_val_val_address.f1 = lower_remote_address_val_val_address_f1
    lower_remote_address_val_val_address_f2 := C.uint8_t(remote_address.GetIpv4().Address.F2)
    lower_remote_address_val_val_address.f2 = lower_remote_address_val_val_address_f2
    lower_remote_address_val_val_address_f3 := C.uint8_t(remote_address.GetIpv4().Address.F3)
    lower_remote_address_val_val_address.f3 = lower_remote_address_val_val_address_f3
    lower_remote_address_val_val.address = lower_remote_address_val_val_address
    *lower_remote_address_val_ptr = lower_remote_address_val_val
  }
  if remote_address.Kind() == WasiSockets0_2_0_NetworkIpSocketAddressKindIpv6 {

    lower_remote_address_val.tag = 1
    lower_remote_address_val_ptr := (*C.wasi_sockets_network_ipv6_socket_address_t)(unsafe.Pointer(&lower_remote_address_val.val))
    var lower_remote_address_val_val C.wasi_sockets_network_ipv6_socket_address_t
    lower_remote_address_val_val_port := C.uint16_t(remote_address.GetIpv6().Port)
    lower_remote_address_val_val.port = lower_remote_address_val_val_port
    lower_remote_address_val_val_flow_info := C.uint32_t(remote_address.GetIpv6().FlowInfo)
    lower_remote_address_val_val.flow_info = lower_remote_address_val_val_flow_info
    var lower_remote_address_val_val_address C.wasi_sockets_network_ipv6_address_t
    lower_remote_address_val_val_address_f0 := C.uint16_t(remote_address.GetIpv6().Address.F0)
    lower_remote_address_val_val_address.f0 = lower_remote_address_val_val_address_f0
    lower_remote_address_val_val_address_f1 := C.uint16_t(remote_address.GetIpv6().Address.F1)
    lower_remote_address_val_val_address.f1 = lower_remote_address_val_val_address_f1
    lower_remote_address_val_val_address_f2 := C.uint16_t(remote_address.GetIpv6().Address.F2)
    lower_remote_address_val_val_address.f2 = lower_remote_address_val_val_address_f2
    lower_remote_address_val_val_address_f3 := C.uint16_t(remote_address.GetIpv6().Address.F3)
    lower_remote_address_val_val_address.f3 = lower_remote_address_val_val_address_f3
    lower_remote_address_val_val_address_f4 := C.uint16_t(remote_address.GetIpv6().Address.F4)
    lower_remote_address_val_val_address.f4 = lower_remote_address_val_val_address_f4
    lower_remote_address_val_val_address_f5 := C.uint16_t(remote_address.GetIpv6().Address.F5)
    lower_remote_address_val_val_address.f5 = lower_remote_address_val_val_address_f5
    lower_remote_address_val_val_address_f6 := C.uint16_t(remote_address.GetIpv6().Address.F6)
    lower_remote_address_val_val_address.f6 = lower_remote_address_val_val_address_f6
    lower_remote_address_val_val_address_f7 := C.uint16_t(remote_address.GetIpv6().Address.F7)
    lower_remote_address_val_val_address.f7 = lower_remote_address_val_val_address_f7
    lower_remote_address_val_val.address = lower_remote_address_val_val_address
    lower_remote_address_val_val_scope_id := C.uint32_t(remote_address.GetIpv6().ScopeId)
    lower_remote_address_val_val.scope_id = lower_remote_address_val_val_scope_id
    *lower_remote_address_val_ptr = lower_remote_address_val_val
  }
  lower_remote_address = lower_remote_address_val
  var ret C.wasi_sockets_tcp_result_void_error_code_t
  C.wasi_sockets_tcp_method_tcp_socket_start_connect(lower_self , lower_network , &lower_remote_address , &ret )
  var lift_ret Result[struct{}, WasiSockets0_2_0_TcpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) FinishConnect() Result[WasiSockets0_2_0_TcpTuple2InputStreamOutputStreamT, WasiSockets0_2_0_TcpErrorCode] {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_sockets_tcp_result_tuple2_own_input_stream_own_output_stream_error_code_t
  C.wasi_sockets_tcp_method_tcp_socket_finish_connect(lower_self , &ret )
  var lift_ret Result[WasiSockets0_2_0_TcpTuple2InputStreamOutputStreamT, WasiSockets0_2_0_TcpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_tuple2_own_input_stream_own_output_stream_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpTuple2InputStreamOutputStreamT
    var lift_ret_val_F0 WasiSockets0_2_0_TcpInputStream
    lift_ret_val_F0 = WasiSockets0_2_0_TcpInputStream(lift_ret_ptr.f0.__handle)
    
    lift_ret_val.F0 = lift_ret_val_F0
    var lift_ret_val_F1 WasiSockets0_2_0_TcpOutputStream
    lift_ret_val_F1 = WasiSockets0_2_0_TcpOutputStream(lift_ret_ptr.f1.__handle)
    
    lift_ret_val.F1 = lift_ret_val_F1
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) StartListen() Result[struct{}, WasiSockets0_2_0_TcpErrorCode] {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_sockets_tcp_result_void_error_code_t
  C.wasi_sockets_tcp_method_tcp_socket_start_listen(lower_self , &ret )
  var lift_ret Result[struct{}, WasiSockets0_2_0_TcpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) FinishListen() Result[struct{}, WasiSockets0_2_0_TcpErrorCode] {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_sockets_tcp_result_void_error_code_t
  C.wasi_sockets_tcp_method_tcp_socket_finish_listen(lower_self , &ret )
  var lift_ret Result[struct{}, WasiSockets0_2_0_TcpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) Accept() Result[WasiSockets0_2_0_TcpTuple3TcpSocketInputStreamOutputStreamT, WasiSockets0_2_0_TcpErrorCode] {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_sockets_tcp_result_tuple3_own_tcp_socket_own_input_stream_own_output_stream_error_code_t
  C.wasi_sockets_tcp_method_tcp_socket_accept(lower_self , &ret )
  var lift_ret Result[WasiSockets0_2_0_TcpTuple3TcpSocketInputStreamOutputStreamT, WasiSockets0_2_0_TcpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_tuple3_own_tcp_socket_own_input_stream_own_output_stream_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpTuple3TcpSocketInputStreamOutputStreamT
    var lift_ret_val_F0 WasiSockets0_2_0_TcpTcpSocket
    lift_ret_val_F0 = WasiSockets0_2_0_TcpTcpSocket(lift_ret_ptr.f0.__handle)
    
    lift_ret_val.F0 = lift_ret_val_F0
    var lift_ret_val_F1 WasiSockets0_2_0_TcpInputStream
    lift_ret_val_F1 = WasiSockets0_2_0_TcpInputStream(lift_ret_ptr.f1.__handle)
    
    lift_ret_val.F1 = lift_ret_val_F1
    var lift_ret_val_F2 WasiSockets0_2_0_TcpOutputStream
    lift_ret_val_F2 = WasiSockets0_2_0_TcpOutputStream(lift_ret_ptr.f2.__handle)
    
    lift_ret_val.F2 = lift_ret_val_F2
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) LocalAddress() Result[WasiSockets0_2_0_TcpIpSocketAddress, WasiSockets0_2_0_TcpErrorCode] {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_sockets_tcp_result_ip_socket_address_error_code_t
  C.wasi_sockets_tcp_method_tcp_socket_local_address(lower_self , &ret )
  var lift_ret Result[WasiSockets0_2_0_TcpIpSocketAddress, WasiSockets0_2_0_TcpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_ip_socket_address_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpIpSocketAddress
    var lift_ret_val_val WasiSockets0_2_0_NetworkIpSocketAddress
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_val_ptr := *(*C.wasi_sockets_network_ipv4_socket_address_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val_val WasiSockets0_2_0_NetworkIpv4SocketAddress
      var lift_ret_val_val_val_Port uint16
      lift_ret_val_val_val_Port = uint16(lift_ret_val_val_ptr.port)
      lift_ret_val_val_val.Port = lift_ret_val_val_val_Port
      var lift_ret_val_val_val_Address WasiSockets0_2_0_NetworkIpv4Address
      var lift_ret_val_val_val_Address_F0 uint8
      lift_ret_val_val_val_Address_F0 = uint8(lift_ret_val_val_ptr.address.f0)
      lift_ret_val_val_val_Address.F0 = lift_ret_val_val_val_Address_F0
      var lift_ret_val_val_val_Address_F1 uint8
      lift_ret_val_val_val_Address_F1 = uint8(lift_ret_val_val_ptr.address.f1)
      lift_ret_val_val_val_Address.F1 = lift_ret_val_val_val_Address_F1
      var lift_ret_val_val_val_Address_F2 uint8
      lift_ret_val_val_val_Address_F2 = uint8(lift_ret_val_val_ptr.address.f2)
      lift_ret_val_val_val_Address.F2 = lift_ret_val_val_val_Address_F2
      var lift_ret_val_val_val_Address_F3 uint8
      lift_ret_val_val_val_Address_F3 = uint8(lift_ret_val_val_ptr.address.f3)
      lift_ret_val_val_val_Address.F3 = lift_ret_val_val_val_Address_F3
      lift_ret_val_val_val.Address = lift_ret_val_val_val_Address
      lift_ret_val_val = WasiSockets0_2_0_NetworkIpSocketAddressIpv4(lift_ret_val_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val_val_ptr := *(*C.wasi_sockets_network_ipv6_socket_address_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val_val WasiSockets0_2_0_NetworkIpv6SocketAddress
      var lift_ret_val_val_val_Port uint16
      lift_ret_val_val_val_Port = uint16(lift_ret_val_val_ptr.port)
      lift_ret_val_val_val.Port = lift_ret_val_val_val_Port
      var lift_ret_val_val_val_FlowInfo uint32
      lift_ret_val_val_val_FlowInfo = uint32(lift_ret_val_val_ptr.flow_info)
      lift_ret_val_val_val.FlowInfo = lift_ret_val_val_val_FlowInfo
      var lift_ret_val_val_val_Address WasiSockets0_2_0_NetworkIpv6Address
      var lift_ret_val_val_val_Address_F0 uint16
      lift_ret_val_val_val_Address_F0 = uint16(lift_ret_val_val_ptr.address.f0)
      lift_ret_val_val_val_Address.F0 = lift_ret_val_val_val_Address_F0
      var lift_ret_val_val_val_Address_F1 uint16
      lift_ret_val_val_val_Address_F1 = uint16(lift_ret_val_val_ptr.address.f1)
      lift_ret_val_val_val_Address.F1 = lift_ret_val_val_val_Address_F1
      var lift_ret_val_val_val_Address_F2 uint16
      lift_ret_val_val_val_Address_F2 = uint16(lift_ret_val_val_ptr.address.f2)
      lift_ret_val_val_val_Address.F2 = lift_ret_val_val_val_Address_F2
      var lift_ret_val_val_val_Address_F3 uint16
      lift_ret_val_val_val_Address_F3 = uint16(lift_ret_val_val_ptr.address.f3)
      lift_ret_val_val_val_Address.F3 = lift_ret_val_val_val_Address_F3
      var lift_ret_val_val_val_Address_F4 uint16
      lift_ret_val_val_val_Address_F4 = uint16(lift_ret_val_val_ptr.address.f4)
      lift_ret_val_val_val_Address.F4 = lift_ret_val_val_val_Address_F4
      var lift_ret_val_val_val_Address_F5 uint16
      lift_ret_val_val_val_Address_F5 = uint16(lift_ret_val_val_ptr.address.f5)
      lift_ret_val_val_val_Address.F5 = lift_ret_val_val_val_Address_F5
      var lift_ret_val_val_val_Address_F6 uint16
      lift_ret_val_val_val_Address_F6 = uint16(lift_ret_val_val_ptr.address.f6)
      lift_ret_val_val_val_Address.F6 = lift_ret_val_val_val_Address_F6
      var lift_ret_val_val_val_Address_F7 uint16
      lift_ret_val_val_val_Address_F7 = uint16(lift_ret_val_val_ptr.address.f7)
      lift_ret_val_val_val_Address.F7 = lift_ret_val_val_val_Address_F7
      lift_ret_val_val_val.Address = lift_ret_val_val_val_Address
      var lift_ret_val_val_val_ScopeId uint32
      lift_ret_val_val_val_ScopeId = uint32(lift_ret_val_val_ptr.scope_id)
      lift_ret_val_val_val.ScopeId = lift_ret_val_val_val_ScopeId
      lift_ret_val_val = WasiSockets0_2_0_NetworkIpSocketAddressIpv6(lift_ret_val_val_val)
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) RemoteAddress() Result[WasiSockets0_2_0_TcpIpSocketAddress, WasiSockets0_2_0_TcpErrorCode] {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_sockets_tcp_result_ip_socket_address_error_code_t
  C.wasi_sockets_tcp_method_tcp_socket_remote_address(lower_self , &ret )
  var lift_ret Result[WasiSockets0_2_0_TcpIpSocketAddress, WasiSockets0_2_0_TcpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_ip_socket_address_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpIpSocketAddress
    var lift_ret_val_val WasiSockets0_2_0_NetworkIpSocketAddress
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_val_ptr := *(*C.wasi_sockets_network_ipv4_socket_address_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val_val WasiSockets0_2_0_NetworkIpv4SocketAddress
      var lift_ret_val_val_val_Port uint16
      lift_ret_val_val_val_Port = uint16(lift_ret_val_val_ptr.port)
      lift_ret_val_val_val.Port = lift_ret_val_val_val_Port
      var lift_ret_val_val_val_Address WasiSockets0_2_0_NetworkIpv4Address
      var lift_ret_val_val_val_Address_F0 uint8
      lift_ret_val_val_val_Address_F0 = uint8(lift_ret_val_val_ptr.address.f0)
      lift_ret_val_val_val_Address.F0 = lift_ret_val_val_val_Address_F0
      var lift_ret_val_val_val_Address_F1 uint8
      lift_ret_val_val_val_Address_F1 = uint8(lift_ret_val_val_ptr.address.f1)
      lift_ret_val_val_val_Address.F1 = lift_ret_val_val_val_Address_F1
      var lift_ret_val_val_val_Address_F2 uint8
      lift_ret_val_val_val_Address_F2 = uint8(lift_ret_val_val_ptr.address.f2)
      lift_ret_val_val_val_Address.F2 = lift_ret_val_val_val_Address_F2
      var lift_ret_val_val_val_Address_F3 uint8
      lift_ret_val_val_val_Address_F3 = uint8(lift_ret_val_val_ptr.address.f3)
      lift_ret_val_val_val_Address.F3 = lift_ret_val_val_val_Address_F3
      lift_ret_val_val_val.Address = lift_ret_val_val_val_Address
      lift_ret_val_val = WasiSockets0_2_0_NetworkIpSocketAddressIpv4(lift_ret_val_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val_val_ptr := *(*C.wasi_sockets_network_ipv6_socket_address_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val_val WasiSockets0_2_0_NetworkIpv6SocketAddress
      var lift_ret_val_val_val_Port uint16
      lift_ret_val_val_val_Port = uint16(lift_ret_val_val_ptr.port)
      lift_ret_val_val_val.Port = lift_ret_val_val_val_Port
      var lift_ret_val_val_val_FlowInfo uint32
      lift_ret_val_val_val_FlowInfo = uint32(lift_ret_val_val_ptr.flow_info)
      lift_ret_val_val_val.FlowInfo = lift_ret_val_val_val_FlowInfo
      var lift_ret_val_val_val_Address WasiSockets0_2_0_NetworkIpv6Address
      var lift_ret_val_val_val_Address_F0 uint16
      lift_ret_val_val_val_Address_F0 = uint16(lift_ret_val_val_ptr.address.f0)
      lift_ret_val_val_val_Address.F0 = lift_ret_val_val_val_Address_F0
      var lift_ret_val_val_val_Address_F1 uint16
      lift_ret_val_val_val_Address_F1 = uint16(lift_ret_val_val_ptr.address.f1)
      lift_ret_val_val_val_Address.F1 = lift_ret_val_val_val_Address_F1
      var lift_ret_val_val_val_Address_F2 uint16
      lift_ret_val_val_val_Address_F2 = uint16(lift_ret_val_val_ptr.address.f2)
      lift_ret_val_val_val_Address.F2 = lift_ret_val_val_val_Address_F2
      var lift_ret_val_val_val_Address_F3 uint16
      lift_ret_val_val_val_Address_F3 = uint16(lift_ret_val_val_ptr.address.f3)
      lift_ret_val_val_val_Address.F3 = lift_ret_val_val_val_Address_F3
      var lift_ret_val_val_val_Address_F4 uint16
      lift_ret_val_val_val_Address_F4 = uint16(lift_ret_val_val_ptr.address.f4)
      lift_ret_val_val_val_Address.F4 = lift_ret_val_val_val_Address_F4
      var lift_ret_val_val_val_Address_F5 uint16
      lift_ret_val_val_val_Address_F5 = uint16(lift_ret_val_val_ptr.address.f5)
      lift_ret_val_val_val_Address.F5 = lift_ret_val_val_val_Address_F5
      var lift_ret_val_val_val_Address_F6 uint16
      lift_ret_val_val_val_Address_F6 = uint16(lift_ret_val_val_ptr.address.f6)
      lift_ret_val_val_val_Address.F6 = lift_ret_val_val_val_Address_F6
      var lift_ret_val_val_val_Address_F7 uint16
      lift_ret_val_val_val_Address_F7 = uint16(lift_ret_val_val_ptr.address.f7)
      lift_ret_val_val_val_Address.F7 = lift_ret_val_val_val_Address_F7
      lift_ret_val_val_val.Address = lift_ret_val_val_val_Address
      var lift_ret_val_val_val_ScopeId uint32
      lift_ret_val_val_val_ScopeId = uint32(lift_ret_val_val_ptr.scope_id)
      lift_ret_val_val_val.ScopeId = lift_ret_val_val_val_ScopeId
      lift_ret_val_val = WasiSockets0_2_0_NetworkIpSocketAddressIpv6(lift_ret_val_val_val)
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) IsListening() bool {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  ret := C.wasi_sockets_tcp_method_tcp_socket_is_listening(lower_self )
  lift_ret := ret
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) AddressFamily() WasiSockets0_2_0_TcpIpAddressFamily {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  ret := C.wasi_sockets_tcp_method_tcp_socket_address_family(lower_self )
  var lift_ret WasiSockets0_2_0_TcpIpAddressFamily
  var lift_ret_val WasiSockets0_2_0_NetworkIpAddressFamily
  if ret == 0 {
    lift_ret_val = WasiSockets0_2_0_NetworkIpAddressFamilyIpv4()
  }
  if ret == 1 {
    lift_ret_val = WasiSockets0_2_0_NetworkIpAddressFamilyIpv6()
  }
  lift_ret = lift_ret_val
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) SetListenBacklogSize(value uint64) Result[struct{}, WasiSockets0_2_0_TcpErrorCode] {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  lower_value := C.uint64_t(value)
  var ret C.wasi_sockets_tcp_result_void_error_code_t
  C.wasi_sockets_tcp_method_tcp_socket_set_listen_backlog_size(lower_self , lower_value , &ret )
  var lift_ret Result[struct{}, WasiSockets0_2_0_TcpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) KeepAliveEnabled() Result[bool, WasiSockets0_2_0_TcpErrorCode] {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_sockets_tcp_result_bool_error_code_t
  C.wasi_sockets_tcp_method_tcp_socket_keep_alive_enabled(lower_self , &ret )
  var lift_ret Result[bool, WasiSockets0_2_0_TcpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*bool)(unsafe.Pointer(&ret.val))
    lift_ret_val := lift_ret_ptr
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) SetKeepAliveEnabled(value bool) Result[struct{}, WasiSockets0_2_0_TcpErrorCode] {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  lower_value := value
  var ret C.wasi_sockets_tcp_result_void_error_code_t
  C.wasi_sockets_tcp_method_tcp_socket_set_keep_alive_enabled(lower_self , lower_value , &ret )
  var lift_ret Result[struct{}, WasiSockets0_2_0_TcpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) KeepAliveIdleTime() Result[WasiSockets0_2_0_TcpDuration, WasiSockets0_2_0_TcpErrorCode] {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_sockets_tcp_result_duration_error_code_t
  C.wasi_sockets_tcp_method_tcp_socket_keep_alive_idle_time(lower_self , &ret )
  var lift_ret Result[WasiSockets0_2_0_TcpDuration, WasiSockets0_2_0_TcpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_duration_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpDuration
    var lift_ret_val_val WasiClocks0_2_0_MonotonicClockDuration
    var lift_ret_val_val_val uint64
    lift_ret_val_val_val = uint64(lift_ret_ptr)
    lift_ret_val_val = lift_ret_val_val_val
    lift_ret_val = lift_ret_val_val
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) SetKeepAliveIdleTime(value WasiSockets0_2_0_TcpDuration) Result[struct{}, WasiSockets0_2_0_TcpErrorCode] {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  var lower_value C.wasi_clocks_monotonic_clock_duration_t
  var lower_value_val C.uint64_t
  lower_value_val_val := C.uint64_t(value)
  lower_value_val = lower_value_val_val
  lower_value = lower_value_val
  var ret C.wasi_sockets_tcp_result_void_error_code_t
  C.wasi_sockets_tcp_method_tcp_socket_set_keep_alive_idle_time(lower_self , lower_value , &ret )
  var lift_ret Result[struct{}, WasiSockets0_2_0_TcpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) KeepAliveInterval() Result[WasiSockets0_2_0_TcpDuration, WasiSockets0_2_0_TcpErrorCode] {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_sockets_tcp_result_duration_error_code_t
  C.wasi_sockets_tcp_method_tcp_socket_keep_alive_interval(lower_self , &ret )
  var lift_ret Result[WasiSockets0_2_0_TcpDuration, WasiSockets0_2_0_TcpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_duration_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpDuration
    var lift_ret_val_val WasiClocks0_2_0_MonotonicClockDuration
    var lift_ret_val_val_val uint64
    lift_ret_val_val_val = uint64(lift_ret_ptr)
    lift_ret_val_val = lift_ret_val_val_val
    lift_ret_val = lift_ret_val_val
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) SetKeepAliveInterval(value WasiSockets0_2_0_TcpDuration) Result[struct{}, WasiSockets0_2_0_TcpErrorCode] {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  var lower_value C.wasi_clocks_monotonic_clock_duration_t
  var lower_value_val C.uint64_t
  lower_value_val_val := C.uint64_t(value)
  lower_value_val = lower_value_val_val
  lower_value = lower_value_val
  var ret C.wasi_sockets_tcp_result_void_error_code_t
  C.wasi_sockets_tcp_method_tcp_socket_set_keep_alive_interval(lower_self , lower_value , &ret )
  var lift_ret Result[struct{}, WasiSockets0_2_0_TcpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) KeepAliveCount() Result[uint32, WasiSockets0_2_0_TcpErrorCode] {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_sockets_tcp_result_u32_error_code_t
  C.wasi_sockets_tcp_method_tcp_socket_keep_alive_count(lower_self , &ret )
  var lift_ret Result[uint32, WasiSockets0_2_0_TcpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.uint32_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint32
    lift_ret_val = uint32(lift_ret_ptr)
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) SetKeepAliveCount(value uint32) Result[struct{}, WasiSockets0_2_0_TcpErrorCode] {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  lower_value := C.uint32_t(value)
  var ret C.wasi_sockets_tcp_result_void_error_code_t
  C.wasi_sockets_tcp_method_tcp_socket_set_keep_alive_count(lower_self , lower_value , &ret )
  var lift_ret Result[struct{}, WasiSockets0_2_0_TcpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) HopLimit() Result[uint8, WasiSockets0_2_0_TcpErrorCode] {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_sockets_tcp_result_u8_error_code_t
  C.wasi_sockets_tcp_method_tcp_socket_hop_limit(lower_self , &ret )
  var lift_ret Result[uint8, WasiSockets0_2_0_TcpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.uint8_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint8
    lift_ret_val = uint8(lift_ret_ptr)
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) SetHopLimit(value uint8) Result[struct{}, WasiSockets0_2_0_TcpErrorCode] {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  lower_value := C.uint8_t(value)
  var ret C.wasi_sockets_tcp_result_void_error_code_t
  C.wasi_sockets_tcp_method_tcp_socket_set_hop_limit(lower_self , lower_value , &ret )
  var lift_ret Result[struct{}, WasiSockets0_2_0_TcpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) ReceiveBufferSize() Result[uint64, WasiSockets0_2_0_TcpErrorCode] {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_sockets_tcp_result_u64_error_code_t
  C.wasi_sockets_tcp_method_tcp_socket_receive_buffer_size(lower_self , &ret )
  var lift_ret Result[uint64, WasiSockets0_2_0_TcpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.uint64_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint64
    lift_ret_val = uint64(lift_ret_ptr)
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) SetReceiveBufferSize(value uint64) Result[struct{}, WasiSockets0_2_0_TcpErrorCode] {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  lower_value := C.uint64_t(value)
  var ret C.wasi_sockets_tcp_result_void_error_code_t
  C.wasi_sockets_tcp_method_tcp_socket_set_receive_buffer_size(lower_self , lower_value , &ret )
  var lift_ret Result[struct{}, WasiSockets0_2_0_TcpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) SendBufferSize() Result[uint64, WasiSockets0_2_0_TcpErrorCode] {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_sockets_tcp_result_u64_error_code_t
  C.wasi_sockets_tcp_method_tcp_socket_send_buffer_size(lower_self , &ret )
  var lift_ret Result[uint64, WasiSockets0_2_0_TcpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.uint64_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint64
    lift_ret_val = uint64(lift_ret_ptr)
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) SetSendBufferSize(value uint64) Result[struct{}, WasiSockets0_2_0_TcpErrorCode] {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  lower_value := C.uint64_t(value)
  var ret C.wasi_sockets_tcp_result_void_error_code_t
  C.wasi_sockets_tcp_method_tcp_socket_set_send_buffer_size(lower_self , lower_value , &ret )
  var lift_ret Result[struct{}, WasiSockets0_2_0_TcpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) Subscribe() WasiSockets0_2_0_TcpPollable {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  ret := C.wasi_sockets_tcp_method_tcp_socket_subscribe(lower_self )
  var lift_ret WasiSockets0_2_0_TcpPollable
  lift_ret = WasiSockets0_2_0_TcpPollable(ret.__handle)

  return lift_ret
}

func (self WasiSockets0_2_0_TcpTcpSocket) Shutdown(shutdown_type WasiSockets0_2_0_TcpShutdownType) Result[struct{}, WasiSockets0_2_0_TcpErrorCode] {
  var lower_self C.wasi_sockets_tcp_borrow_tcp_socket_t
  lower_self.__handle = C.int32_t(self)
  var lower_shutdown_type C.wasi_sockets_tcp_shutdown_type_t
  if shutdown_type.Kind() == WasiSockets0_2_0_TcpShutdownTypeKindReceive {
    lower_shutdown_type = 0
  }
  if shutdown_type.Kind() == WasiSockets0_2_0_TcpShutdownTypeKindSend {
    lower_shutdown_type = 1
  }
  if shutdown_type.Kind() == WasiSockets0_2_0_TcpShutdownTypeKindBoth {
    lower_shutdown_type = 2
  }
  var ret C.wasi_sockets_tcp_result_void_error_code_t
  C.wasi_sockets_tcp_method_tcp_socket_shutdown(lower_self , lower_shutdown_type , &ret )
  var lift_ret Result[struct{}, WasiSockets0_2_0_TcpErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

// Import functions from wasi:sockets/tcp-create-socket@0.2.0
type WasiSockets0_2_0_TcpCreateSocketNetwork = WasiSockets0_2_0_NetworkNetwork
type WasiSockets0_2_0_TcpCreateSocketErrorCode = WasiSockets0_2_0_NetworkErrorCode
type WasiSockets0_2_0_TcpCreateSocketIpAddressFamily = WasiSockets0_2_0_NetworkIpAddressFamily
type WasiSockets0_2_0_TcpCreateSocketTcpSocket = WasiSockets0_2_0_TcpTcpSocket
func WasiSockets0_2_0_TcpCreateSocketCreateTcpSocket(address_family WasiSockets0_2_0_TcpCreateSocketIpAddressFamily) Result[WasiSockets0_2_0_TcpCreateSocketTcpSocket, WasiSockets0_2_0_TcpCreateSocketErrorCode] {
  var lower_address_family C.wasi_sockets_network_ip_address_family_t
  var lower_address_family_val C.wasi_sockets_network_ip_address_family_t
  if address_family.Kind() == WasiSockets0_2_0_NetworkIpAddressFamilyKindIpv4 {
    lower_address_family_val = 0
  }
  if address_family.Kind() == WasiSockets0_2_0_NetworkIpAddressFamilyKindIpv6 {
    lower_address_family_val = 1
  }
  lower_address_family = lower_address_family_val
  var ret C.wasi_sockets_tcp_create_socket_result_own_tcp_socket_error_code_t
  C.wasi_sockets_tcp_create_socket_create_tcp_socket(lower_address_family , &ret )
  var lift_ret Result[WasiSockets0_2_0_TcpCreateSocketTcpSocket, WasiSockets0_2_0_TcpCreateSocketErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_create_socket_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpCreateSocketErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_sockets_tcp_create_socket_own_tcp_socket_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_TcpCreateSocketTcpSocket
    lift_ret_val = WasiSockets0_2_0_TcpCreateSocketTcpSocket(lift_ret_ptr.__handle)
    
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

// Import functions from wasi:sockets/ip-name-lookup@0.2.0
type WasiSockets0_2_0_IpNameLookupPollable = WasiIo0_2_0_PollPollable
type WasiSockets0_2_0_IpNameLookupNetwork = WasiSockets0_2_0_NetworkNetwork
type WasiSockets0_2_0_IpNameLookupErrorCode = WasiSockets0_2_0_NetworkErrorCode
type WasiSockets0_2_0_IpNameLookupIpAddress = WasiSockets0_2_0_NetworkIpAddress
// WasiSockets0_2_0_IpNameLookupResolveAddressStream is a handle to imported resource resolve-address-stream
type WasiSockets0_2_0_IpNameLookupResolveAddressStream int32

//go:wasmimport wasi:sockets/ip-name-lookup@0.2.0 [resource-drop]resolve-address-stream
func _WasiSockets0_2_0_IpNameLookupResolveAddressStream_drop(self WasiSockets0_2_0_IpNameLookupResolveAddressStream)

func (self WasiSockets0_2_0_IpNameLookupResolveAddressStream) Drop() {
  _WasiSockets0_2_0_IpNameLookupResolveAddressStream_drop(self)
}

func WasiSockets0_2_0_IpNameLookupResolveAddresses(network WasiSockets0_2_0_IpNameLookupNetwork, name string) Result[WasiSockets0_2_0_IpNameLookupResolveAddressStream, WasiSockets0_2_0_IpNameLookupErrorCode] {
  var lower_network C.wasi_sockets_ip_name_lookup_borrow_network_t
  lower_network.__handle = C.int32_t(network)
  var lower_name C.frontend_string_t

  // use unsafe.Pointer to avoid copy
  lower_name.ptr = (*uint8)(unsafe.Pointer(C.CString(name)))
  lower_name.len = C.size_t(len(name))
  var ret C.wasi_sockets_ip_name_lookup_result_own_resolve_address_stream_error_code_t
  C.wasi_sockets_ip_name_lookup_resolve_addresses(lower_network , &lower_name , &ret )
  var lift_ret Result[WasiSockets0_2_0_IpNameLookupResolveAddressStream, WasiSockets0_2_0_IpNameLookupErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_ip_name_lookup_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_IpNameLookupErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_sockets_ip_name_lookup_own_resolve_address_stream_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_IpNameLookupResolveAddressStream
    lift_ret_val = WasiSockets0_2_0_IpNameLookupResolveAddressStream(lift_ret_ptr.__handle)
    
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiSockets0_2_0_IpNameLookupResolveAddressStream) ResolveNextAddress() Result[Option[WasiSockets0_2_0_IpNameLookupIpAddress], WasiSockets0_2_0_IpNameLookupErrorCode] {
  var lower_self C.wasi_sockets_ip_name_lookup_borrow_resolve_address_stream_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_sockets_ip_name_lookup_result_option_ip_address_error_code_t
  C.wasi_sockets_ip_name_lookup_method_resolve_address_stream_resolve_next_address(lower_self , &ret )
  var lift_ret Result[Option[WasiSockets0_2_0_IpNameLookupIpAddress], WasiSockets0_2_0_IpNameLookupErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_sockets_ip_name_lookup_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiSockets0_2_0_IpNameLookupErrorCode
    var lift_ret_val_val WasiSockets0_2_0_NetworkErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAccessDenied()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotSupported()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidArgument()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeOutOfMemory()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTimeout()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConcurrencyConflict()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNotInProgress()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeInvalidState()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNewSocketLimit()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressNotBindable()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeAddressInUse()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeRemoteUnreachable()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionRefused()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionReset()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeConnectionAborted()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeDatagramTooLarge()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeNameUnresolvable()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodeTemporaryResolverFailure()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val_val = WasiSockets0_2_0_NetworkErrorCodePermanentResolverFailure()
    }
    lift_ret_val = lift_ret_val_val
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_sockets_ip_name_lookup_option_ip_address_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val Option[WasiSockets0_2_0_IpNameLookupIpAddress]
    if lift_ret_ptr.is_some {
      var lift_ret_val_val WasiSockets0_2_0_IpNameLookupIpAddress
      var lift_ret_val_val_val WasiSockets0_2_0_NetworkIpAddress
      if lift_ret_ptr.val.tag == 0 {
        lift_ret_val_val_val_ptr := *(*C.wasi_sockets_network_ipv4_address_t)(unsafe.Pointer(&lift_ret_ptr.val.val))
        var lift_ret_val_val_val_val WasiSockets0_2_0_NetworkIpv4Address
        var lift_ret_val_val_val_val_F0 uint8
        lift_ret_val_val_val_val_F0 = uint8(lift_ret_val_val_val_ptr.f0)
        lift_ret_val_val_val_val.F0 = lift_ret_val_val_val_val_F0
        var lift_ret_val_val_val_val_F1 uint8
        lift_ret_val_val_val_val_F1 = uint8(lift_ret_val_val_val_ptr.f1)
        lift_ret_val_val_val_val.F1 = lift_ret_val_val_val_val_F1
        var lift_ret_val_val_val_val_F2 uint8
        lift_ret_val_val_val_val_F2 = uint8(lift_ret_val_val_val_ptr.f2)
        lift_ret_val_val_val_val.F2 = lift_ret_val_val_val_val_F2
        var lift_ret_val_val_val_val_F3 uint8
        lift_ret_val_val_val_val_F3 = uint8(lift_ret_val_val_val_ptr.f3)
        lift_ret_val_val_val_val.F3 = lift_ret_val_val_val_val_F3
        lift_ret_val_val_val = WasiSockets0_2_0_NetworkIpAddressIpv4(lift_ret_val_val_val_val)
      }
      if lift_ret_ptr.val.tag == 1 {
        lift_ret_val_val_val_ptr := *(*C.wasi_sockets_network_ipv6_address_t)(unsafe.Pointer(&lift_ret_ptr.val.val))
        var lift_ret_val_val_val_val WasiSockets0_2_0_NetworkIpv6Address
        var lift_ret_val_val_val_val_F0 uint16
        lift_ret_val_val_val_val_F0 = uint16(lift_ret_val_val_val_ptr.f0)
        lift_ret_val_val_val_val.F0 = lift_ret_val_val_val_val_F0
        var lift_ret_val_val_val_val_F1 uint16
        lift_ret_val_val_val_val_F1 = uint16(lift_ret_val_val_val_ptr.f1)
        lift_ret_val_val_val_val.F1 = lift_ret_val_val_val_val_F1
        var lift_ret_val_val_val_val_F2 uint16
        lift_ret_val_val_val_val_F2 = uint16(lift_ret_val_val_val_ptr.f2)
        lift_ret_val_val_val_val.F2 = lift_ret_val_val_val_val_F2
        var lift_ret_val_val_val_val_F3 uint16
        lift_ret_val_val_val_val_F3 = uint16(lift_ret_val_val_val_ptr.f3)
        lift_ret_val_val_val_val.F3 = lift_ret_val_val_val_val_F3
        var lift_ret_val_val_val_val_F4 uint16
        lift_ret_val_val_val_val_F4 = uint16(lift_ret_val_val_val_ptr.f4)
        lift_ret_val_val_val_val.F4 = lift_ret_val_val_val_val_F4
        var lift_ret_val_val_val_val_F5 uint16
        lift_ret_val_val_val_val_F5 = uint16(lift_ret_val_val_val_ptr.f5)
        lift_ret_val_val_val_val.F5 = lift_ret_val_val_val_val_F5
        var lift_ret_val_val_val_val_F6 uint16
        lift_ret_val_val_val_val_F6 = uint16(lift_ret_val_val_val_ptr.f6)
        lift_ret_val_val_val_val.F6 = lift_ret_val_val_val_val_F6
        var lift_ret_val_val_val_val_F7 uint16
        lift_ret_val_val_val_val_F7 = uint16(lift_ret_val_val_val_ptr.f7)
        lift_ret_val_val_val_val.F7 = lift_ret_val_val_val_val_F7
        lift_ret_val_val_val = WasiSockets0_2_0_NetworkIpAddressIpv6(lift_ret_val_val_val_val)
      }
      lift_ret_val_val = lift_ret_val_val_val
      lift_ret_val.Set(lift_ret_val_val)
    } else {
      lift_ret_val.Unset()
    }
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiSockets0_2_0_IpNameLookupResolveAddressStream) Subscribe() WasiSockets0_2_0_IpNameLookupPollable {
  var lower_self C.wasi_sockets_ip_name_lookup_borrow_resolve_address_stream_t
  lower_self.__handle = C.int32_t(self)
  ret := C.wasi_sockets_ip_name_lookup_method_resolve_address_stream_subscribe(lower_self )
  var lift_ret WasiSockets0_2_0_IpNameLookupPollable
  lift_ret = WasiSockets0_2_0_IpNameLookupPollable(ret.__handle)

  return lift_ret
}

// Import functions from wasi:random/random@0.2.0
func WasiRandom0_2_0_RandomGetRandomBytes(len uint64) []uint8 {
  lower_len := C.uint64_t(len)
  var ret C.frontend_list_u8_t
  C.wasi_random_random_get_random_bytes(lower_len , &ret )
  var lift_ret []uint8
  lift_ret = make([]uint8, ret.len)
  if ret.len > 0 {
    for lift_ret_i := 0; lift_ret_i < int(ret.len); lift_ret_i++ {
      var empty_lift_ret C.uint8_t
      lift_ret_ptr := *(*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(ret.ptr)) +
      uintptr(lift_ret_i)*unsafe.Sizeof(empty_lift_ret)))
      var list_lift_ret uint8
      list_lift_ret = uint8(lift_ret_ptr)
      lift_ret[lift_ret_i] = list_lift_ret
    }
  }
  return lift_ret
}

func WasiRandom0_2_0_RandomGetRandomU64() uint64 {
  ret := C.wasi_random_random_get_random_u64()
  var lift_ret uint64
  lift_ret = uint64(ret)
  return lift_ret
}

// Import functions from wasi:random/insecure@0.2.0
func WasiRandom0_2_0_InsecureGetInsecureRandomBytes(len uint64) []uint8 {
  lower_len := C.uint64_t(len)
  var ret C.frontend_list_u8_t
  C.wasi_random_insecure_get_insecure_random_bytes(lower_len , &ret )
  var lift_ret []uint8
  lift_ret = make([]uint8, ret.len)
  if ret.len > 0 {
    for lift_ret_i := 0; lift_ret_i < int(ret.len); lift_ret_i++ {
      var empty_lift_ret C.uint8_t
      lift_ret_ptr := *(*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(ret.ptr)) +
      uintptr(lift_ret_i)*unsafe.Sizeof(empty_lift_ret)))
      var list_lift_ret uint8
      list_lift_ret = uint8(lift_ret_ptr)
      lift_ret[lift_ret_i] = list_lift_ret
    }
  }
  return lift_ret
}

func WasiRandom0_2_0_InsecureGetInsecureRandomU64() uint64 {
  ret := C.wasi_random_insecure_get_insecure_random_u64()
  var lift_ret uint64
  lift_ret = uint64(ret)
  return lift_ret
}

// Import functions from wasi:random/insecure-seed@0.2.0
type WasiRandom0_2_0_InsecureSeedTuple2U64U64T struct {
  F0 uint64
  F1 uint64
}

func WasiRandom0_2_0_InsecureSeedInsecureSeed() WasiRandom0_2_0_InsecureSeedTuple2U64U64T {
  var ret C.frontend_tuple2_u64_u64_t
  C.wasi_random_insecure_seed_insecure_seed(&ret )
  var lift_ret WasiRandom0_2_0_InsecureSeedTuple2U64U64T
  var lift_ret_F0 uint64
  lift_ret_F0 = uint64(ret.f0)
  lift_ret.F0 = lift_ret_F0
  var lift_ret_F1 uint64
  lift_ret_F1 = uint64(ret.f1)
  lift_ret.F1 = lift_ret_F1
  return lift_ret
}

// Export functions from bachelor:frontend/add@0.1.0
var exports_bachelor_frontend0_1_0_add ExportsBachelorFrontend0_1_0_Add = nil
// `SetExportsBachelorFrontend0_1_0_Add` sets the `ExportsBachelorFrontend0_1_0_Add` interface implementation.
// This function will need to be called by the init() function from the guest application.
// It is expected to pass a guest implementation of the `ExportsBachelorFrontend0_1_0_Add` interface.
func SetExportsBachelorFrontend0_1_0_Add(i ExportsBachelorFrontend0_1_0_Add) {
  exports_bachelor_frontend0_1_0_add = i
}
type ExportsBachelorFrontend0_1_0_Add interface {
  Add(a uint32, b uint32) uint32 
}
//export exports_bachelor_frontend_add_add
func exportsBachelorFrontend010AddAdd(a C.uint32_t, b C.uint32_t) C.uint32_t {
  var lift_a uint32
  lift_a = uint32(a)
  var lift_b uint32
  lift_b = uint32(b)
  result := exports_bachelor_frontend0_1_0_add.Add(lift_a, lift_b)
  lower_result := C.uint32_t(result)
  return lower_result

}
// Export functions from bachelor:frontend/client@0.1.0
var exports_bachelor_frontend0_1_0_client ExportsBachelorFrontend0_1_0_Client = nil
// `SetExportsBachelorFrontend0_1_0_Client` sets the `ExportsBachelorFrontend0_1_0_Client` interface implementation.
// This function will need to be called by the init() function from the guest application.
// It is expected to pass a guest implementation of the `ExportsBachelorFrontend0_1_0_Client` interface.
func SetExportsBachelorFrontend0_1_0_Client(i ExportsBachelorFrontend0_1_0_Client) {
  exports_bachelor_frontend0_1_0_client = i
}
type ExportsBachelorFrontend0_1_0_Client interface {
  GetSensorData() string 
}
//export exports_bachelor_frontend_client_get_sensor_data
func exportsBachelorFrontend010ClientGetSensorData(ret *C.frontend_string_t) {
  result := exports_bachelor_frontend0_1_0_client.GetSensorData()
  var lower_result C.frontend_string_t

  // use unsafe.Pointer to avoid copy
  lower_result.ptr = (*uint8)(unsafe.Pointer(C.CString(result)))
  lower_result.len = C.size_t(len(result))
  *ret = lower_result

}
