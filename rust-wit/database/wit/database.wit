package backend:database@0.1.0;

interface sql {
  type error = u32;

  resource connection; 
  open-connection: func(url: string, create-if-missing: bool) -> result<connection, error>;
  drop-connection: func(conn: connection) -> result<_, error>;

  create-table: func(query: string, conn: borrow<connection>);

  select: func(conn: borrow<connection>) -> result<string, error>;
  insert: func(conn: borrow<connection>, name: string);
  delete: func(conn: borrow<connection>, name: string);

  print-to-host: func(str: string);
}

interface sql-handler {
  use sql.{error};
  db-test: func() -> result<_, error>;
}

interface tcp {
  type error = u32;

  resource socket;
  resource tcp-stream;

  create-socket: func(addr: string) -> result<socket, error>;
  accept: func(sock: borrow<socket>) -> result<tcp-stream, error>;
  read: func(sock: borrow<socket>, inc-str: borrow<tcp-stream>) -> result<string, error>;
  close-stream: func(sock: borrow<socket>, inc-str: tcp-stream);
}

interface sockets-handler {
  use tcp.{error, socket};
  socket-handle: func() -> result<_, error>;
}


world database {
  //include wasi:http/proxy@0.2.0;
  include wasi:sockets/imports@0.2.0;
  import tcp;
  import sql;

  export sockets-handler;
  //export sql-handler;
}
