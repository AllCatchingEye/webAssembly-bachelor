package bachelor:database;

interface types {
    // one single row item
    record row {
        field-name: string,
        value: data-type,
    }
    
    // common data types
    variant data-type {
        int32(s32),
        int64(s64),
        uint32(u32),
        uint64(u64),
        float(float64),
        double(float64),
        str(string),
        boolean(bool),
        date(string),
        time(string),
        timestamp(string),
        binary(list<u8>),
        null
    }

    // allows parameterized queries
    // e.g., prepare-statement("SELECT * FROM users WHERE name = ? AND age = ?", vec!["John Doe", "32"])
    type statement = u32;
    drop-statement: func(s: statement);
    prepare-statement: func(query: string, params: list<string>) -> result<statement, error>;

    /// An error resource type.
    /// Currently, this provides only one function to return a string representation
    /// of the error. In the future, this will be extended to provide more information.
    // TODO: switch to `resource error { ... }`
    type error = u32;
    drop-error: func(e: error);
    trace-error: func(e: error) -> string ;

    /// A connection to a sql store.
    type connection = u32;
    drop-connection: func(b: connection);
    open-connection: func(name: string) -> result<connection, error>;
}

interface readwrite {
    use types.{statement, row, error, connection};
    
    // query is optimized for querying data, and 
    // implementors can make use of that fact to optimize 
    // the performance of query execution (e.g., using
    // indexes).
    query: func(c: connection, q: statement) -> result<list<row>, error>;
    
    // exec is for modifying data in the database.
    exec: func(c: connection, q: statement) -> result<u32, error>;
}

interface handler {
    use wasi:sockets/udp@0.2.0.{udp-socket};
    use wasi:sockets/network@0.2.0.{error-code};
    use types.{error};
    start-server: func() -> result<udp-socket, error-code>;
    handle: func(sock: udp-socket) -> result<_, error-code>;
    socket-receive: func(sock: udp-socket) -> result<tuple<udp-socket, list<u8>>, error-code>;
    add: func(x: s32, y: s32) -> s32;
}

world database {
  import wasi:sockets/udp@0.2.0;
  import wasi:sockets/network@0.2.0;
  import wasi:sockets/udp-create-socket@0.2.0;
  import wasi:sockets/instance-network@0.2.0;
  import types;
  import readwrite;

  export handler;
}
